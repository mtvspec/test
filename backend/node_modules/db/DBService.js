'use strict';

var pg = require('pg');

var Utils = require('utils'), DBUtils = new Utils();

function DBService() {
};
/**
*
*
*/
DBService.prototype.selectRecords = function selectRecords(query, log, cb) {
  if (!query.text) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('selectRecords: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text
    }, function (err, result) {
      var rowCount, data;
      if (err) {
        console.error('selectRecords: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount > 0) {
        data = result.rows;
        client.query({
          text: log.text,
          values: log.values
        }, function (err, result) {
          if (err) {
            if (err.code === '23502') {
              console.error('Log error:', err.column);
            }
            if (err.code === '23505') {
              console.error('Log error:', err.detail);
            }
            console.error('insertRecord: query:\n', err);
            return cb(500, null);
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              console.error('Not logged:', log);
            }
            if (rowCount === 1) {
              console.log('Logged');
            }
          }
        });
        return cb(200, data);
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.selectRecordsWL = function selectRecordsWL(query, cb) {
  console.log(query);
  if (!query.text) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('selectRecords: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text
    }, function (err, result) {
      var rowCount;
      if (err) {
        console.error('selectRecords: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount > 0) {
        return cb(200, result.rows);
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.selectRecord = function selectRecord(query, log, cb) {
  if (query.values.iin) {
    query.values.id = query.values.iin;
  }
  if (!(query.text && query.values.id)) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('selectRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount;
      if (err) {
        console.error('selectRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        client.query({
          text: log.text,
          values: log.values
        }, function (err, result) {
          if (err) {
            if (err.code === '23502') {
              console.error('Log error:', err.column);
            }
            if (err.code === '23505') {
              console.error('Log error:', err.detail);
            }
            console.error('insertRecord: query:\n', err);
            return cb(500, null);
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              console.error('Not logged:', log);
            }
            if (rowCount === 1) {
              console.log('Logged');
            }
          }
        });
        if (query.id === data.id) {
          return cb(200, data);
        }
      } else {
        return cb(500, null);
      }
    });
  });
};

DBService.prototype.selectRecordWL = function selectRecordWL(query, cb) {
  if (!query.values || (query.values.username && query.values.password)) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('selectRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount;
      if (err) {
        console.error('selectRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount === 1) {
        return cb(200, result.rows[0]);
      } else {
        return cb(500, null);
      }
    });
  });
};

DBService.prototype.selectRecordsByIDWL = function selectRecordsByIDWL(query, cb) {
  if (!query.values || (query.values.username && query.values.password)) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('selectRecordsByIDWL: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount;
      if (err) {
        console.error('selectRecordsByIDWL: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount > 1) {
        return cb(200, result.rows);
      } else {
        return cb(500, null);
      }
    });
  });
};

DBService.prototype.insertRecord = function insertRecord(query, log, cb) {
  console.log('InsertRecord:\n', log);
  if (!query) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('insertRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount, column, data;
      if (err) {
        if (err.code === '23502') {
          console.error('insertRecord: query:\n', err);
          return cb(400, err.column);
        }
        if (err.code === '23505') {
          console.error('insertRecord: query:\n', err);
          return cb(400, err.detail);
        }
        console.error('insertRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(400, null);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        client.query({
          text: log.text,
          values: log.values
        }, function (err, result) {
          if (err) {
            if (err.code === '23502') {
              console.error('Log error:', err.column);
            }
            if (err.code === '23505') {
              console.error('Log error:', err.detail);
            }
            console.error('insertRecord: query:\n', err);
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              console.error('Not logged:', log);
            }
            if (rowCount === 1) {
              console.log('Logged');
            }
          }
        });
        return cb(201, data);
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.insertRecordWL = function insertRecordWL(query, cb) {
  if (!query) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('insertRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount, data;
      if (err) {
        if (err.code === '23502') {
          return cb(400, err.column);
        }
        if (err.code === '23505') {
          return cb(400, err.detail);
        }
        console.error('insertRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(400, null);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        return cb(201, data);
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.updateRecord = function updateRecord(query, log, cb) {
  if (query.iin) {
    query.id = query.iin;
  }
  console.log('updateRecord:\n', log);
  if (!query) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('updateRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount, data;
      if (err) {
        if (err.code === '23502') {
          return cb(400, err.column);
        }
        if (err.code === '23505') {
          return cb(400, err.detail);
        }
        console.error('updateRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        if (log) {
          client.query({
            text: log.text,
            values: log.values
          }, function (err, result) {
            if (err) {
              if (err.code === '23502') {
                console.error('Log error:', err.column);
              }
              if (err.code === '23505') {
                console.error('Log error:', err.detail);
              }
              console.error('insertRecord: query:\n', err);
            } else {
              done();
              rowCount = result.rowCount;
              if (rowCount === 0) {
                console.error('Not logged:', log);
              }
              if (rowCount === 1) {
                console.log('Logged');
              }
            }
          });
        }
        if (query.values.id === data.id) {
          return cb(200, data);
        }
      }
      return cb(500);
    });
  });
};

DBService.prototype.updateRecordWL = function updateRecordWL(query, cb) {
  if (query.iin) {
    query.id = query.iin;
  }
  console.log('updateRecord:\n', log);
  if (!query) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('updateRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount, data;
      if (err) {
        if (err.code === '23502') {
          return cb(400, err.column);
        }
        if (err.code === '23505') {
          return cb(400, err.detail);
        }
        console.error('updateRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        if (query.values.id === data.id) {
          return cb(200, data);
        }
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.deleteRecord = function deleteRecord(query, log, cb) {
  if (query.values.iin) {
    query.values.id = query.iin;
  }
  if (!query.id) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('deleteRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount, data;
      if (err) {
        console.error('deleteRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        client.query({
          text: log.text,
          values: log.values
        }, function (err, result) {
          if (err) {
            if (err.code === '23502') {
              console.error('Log error:', err.column);
            }
            if (err.code === '23505') {
              console.error('Log error:', err.detail);
            }
            console.error('insertRecord: query:\n', err);
            return cb(500, null);
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              console.error('Not logged:', log);
            }
            if (rowCount === 1) {
              console.log('Logged');
            }
          }
        });
        if (query.values.id === data.id) {
          return cb(200, data);
        }
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.deleteRecordWL = function deleteRecordWL(query, cb) {
  if (query.iin) {
    query.id = query.iin;
  }
  if (!query.id) {
    return cb(400, null);
  }
  pg.connect(function (err, client, done) {
    if (err) {
      console.error('deleteRecord: connect:\n', err);
      return cb(500, null);
    }
    client.query({
      text: query.text,
      values: query.values
    }, function (err, result) {
      var rowCount, data;
      if (err) {
        console.error('deleteRecord: query:\n', err);
        return cb(500, null);
      }
      done();
      rowCount = result.rowCount;
      if (rowCount === 0) {
        return cb(204, []);
      }
      if (rowCount === 1) {
        data = result.rows[0];
        if (query.values.id === data.id) {
          return cb(200, data);
        }
      }
      return cb(500, null);
    });
  });
};

DBService.prototype.performQuery = function performQuery(query, queryLog, queryFn, cb) {

  query = DBUtils.formatQuery(query);
  if (typeof queryLog === 'object') {
    queryLog = DBUtils.formatQuery(queryLog);
  }

  queryFn(query, queryLog,
    function (status, data) {
      if (typeof cb === 'function') {
        cb(status, data);
      }
    }
  );

};

DBService.prototype.performQueryWL = function performQueryWL(query, queryFn, cb) {

  query = DBUtils.formatQuery(query);

  queryFn(query,
    function (status, data) {
      if (typeof cb === 'function') {
        cb(status, data);
      }
    }
  );

};

function performQuery(config, cb) {
  if (!config.query) {
    return cb(400, null);
  } else {
    config.query = DBUtils.formatQuery(config.query);
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('performQuery: connect:\n', err);
        return cb(500, null);
      } else {
        client.query({
          query: config.query.text,
          values: config.query.values
        }, function (err, result) {
          var rowCount, data;
          if (err) {
            console.error('performQuery: query:\n', err);
            return cb(500, null);
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              return cb(204, []);
            } else {
              data = result.rows;
              if (config.log) {
                config.log = formatQuery(config.log);
                client.query({
                  query: config.log.text,
                  values: config.log.values
                }, function (err, result) {
                  var rowCount;
                  if (err) {
                    console.error('performQuery: log:\n', err);
                  } else {
                    done();
                    rowCount = result.rowCount;
                    if (rowCount === 1) {
                      console.log('Logged');
                    } else {
                      console.log('Not logged');
                    }
                  }
                });
              } else {
                return cb(200, data);
              }
            }
          }
        });
      }
    });
  }
};

module.exports = DBService;
