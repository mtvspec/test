var DBQueries = {
  selectProjectsQuery: function selectProjectsQuery() {
    return {
      text: 'SELECT id, customer_id AS "customerID", project_formal_name AS "projectFormalName", project_work_name AS "projectWorkName", project_official_name AS "projectOfficialName", start_date AS "startDate", end_date AS "endDate", budget, manager_id AS "managerID" FROM open_project.e_projects WHERE is_deleted = \'N\' ORDER BY id ASC'
    }
  },
  selectProjectQuery: function selectProjectQuery(project) {
    return {
      text: 'SELECT id, customer_id AS "customerID", project_formal_name AS "projectFormalName", project_work_name AS "projectWorkName", project_official_name AS "projectOfficialName", start_date AS "startDate", end_date AS "endDate", budget, manager_id AS "managerID" FROM open_project.e_projects WHERE is_deleted = \'N\' AND id = {id}',
      values: project
    }
  },
  insertProjectQuery: function insertProjectQuery(project) {
    return {
      text: 'INSERT INTO open_project.e_projects (customer_id, project_formal_name, project_work_name, project_official_name, start_date, end_date, budget, manager_id) VALUES ({customerID}, {projectFormalName}, {projectWorkName}, {projectOfficialName}, {startDate}, {endDate}, {budget}, {managerID}) RETURNING id',
      values: project
    }
  },
  updateProjectQuery: function updateProjectQuery(project) {
    return {
      text: 'UPDATE open_project.e_projects SET customer_id = {customerID}, project_formal_name = {projectFormalName}, project_work_name = {projectWorkName}, project_official_name = {projectOfficialName}, start_date = {startDate}, end_date = {endDate}, budget = {budget}, manager_id = {managerID} WHERE id = {id} RETURNING id',
      values: project
    }
  },
  deleteProjectQuery: function deleteProjectQuery(project) {
    return {
      text: 'DELETE FROM open_project.e_projects WHERE id = {id}',
      values: project
    }
  },
  selectRemarksObjectsQuery: function selectRemarksObjectsQuery() {
    return {
      text: 'SELECT id, object_name AS "objectName" FROM open_project.e_remarks_objects ORDER BY id ASC'
    }
  },
  insertRemarkObjectQuery: function insertRemarkObjectQuery(remarkObject) {
    return {
      text: 'INSERT INTO open_project.e_remarks_objects (object_name) VALUES ({objectName}) RETURNING id',
      values: remarkObject
    }
  },
  selectProjectsResultsQuery: function selectProjectsResultsQuery(project) {
    return {
      text: 'SELECT id, project_id AS "projectID", type_id AS "typeID", result_name AS "resultName", parent_id AS "parentID", author_id AS "authorID", responsible_person_id AS "responsiblePersonID", status_id AS "statusID", is_deleted AS "isDeleted" FROM open_project.e_project_results WHERE project_id = {projectID} ORDER BY id ASC',
      values: project
    }
  },
  insertRemarkQuery: function insertRemarkQuery(remark) {
    return {
      text: 'INSERT INTO open_project.e_remarks (author_id, object_id, remark_text, responsible_person_id) VALUES ({authorID}, {objectID}, {remarkText}, {responsiblePersonID}) RETURNING id',
      values: remark
    }
  },
  selectRemarksStatusesQuery: function selectRemarksStatusesQuery() {
    return {
      text: 'SELECT id, status_name AS "statusName" FROM dict.remark_status ORDER BY id ASC'
    }
  },
  selectProjectResultTypesQuery: function selectProjectResultTypesQuery() {
    return {
      text: 'SELECT id, parent_id AS "parentID", type_name AS "typeName" FROM dict.result_type WHERE is_deleted = \'N\' ORDER BY id ASC'
    }
  },
  selectProjectResultStatusesQuery: function selectProjectResultStatusesQuery() {
    return {
      text: 'SELECT id, result_status_name AS "resultStatusName" FROM dict.result_status ORDER BY id ASC'
    }
  },
  insertProjectResultQuery: function insertProjectResultQuery(projectResult) {
    return {
      text: 'INSERT INTO open_project.e_project_results (project_id, type_id, result_name, parent_id, author_id, responsible_person_id, status_id) VALUES ({projectID}, {typeID}, {resultName}, {parentID}, {authorID}, {responsiblePersonID}, {statusID}) RETURNING id',
      values: projectResult
    }
  },
  selectRemarksQuery: function selectRemarksQuery() {
    return {
      text: 'SELECT id, author_id AS "authorID", object_id AS "objectID", remark_text AS "remarkText", responsible_person_id AS "responsiblePersonID", reg_datetime AS "regDateTime", status_id AS "statusID" FROM open_project.e_remarks ORDER BY id ASC'
    }
  },
  selectGendersQuery: function selectGendersQuery() {
    return {
      text: 'SELECT id, gender_name AS "genderName" FROM fl.gender ORDER BY id DESC'
    }
  },
  selectTasksQuery: function selectTasksQuery() {
    return {
      text: 'SELECT id, task_name, task_description FROM e_tasks ORDER BY iin ASC'
    }
  },
  selectTaskQuery: function selectTasksQuery(task) {
    return {
      text: 'SELECT id, task_name, task_description FROM e_tasks WHERE id = {id}',
      values: task
    };
  },
  insertTaskQuery: function insertTaskQuery(task) {
    return {
      text: 'INSERT INTO e_tasks (task_name, task_description) VALUES ({taskName}, {taskDescription}) RETURNING id',
      values: task
    }
  },
  updateTaskQuery: function updateTaskQuery(task) {
    return {
      text: 'UPDATE e_tasks SET task_name = {taskName}, task_description = {taskDescription} WHERE id = {id}',
      values: task
    }
  },
  deleteTaskQuery: function deleteTaskQuery(task) {
    return {
      text: 'DELETE FROM e_tasks WHERE id = {id}',
      values: task
    }
  },
  selectPersonsQuery: function selectPersonsQuery() {
    return {
      text: 'SELECT id, last_name AS "lastName", first_name AS "firstName", middle_name AS "middleName", dob, gender_id AS "genderID" FROM fl.e_persons WHERE is_deleted = \'N\' ORDER BY id ASC'
    }
  },
  selectPersonsQueryLog: function selectPersonsQueryLog(personLog) {
    return {
      text: 'INSERT INTO log$.e_persons (session_id, manipulation_type_id) VALUES ({sessionID}, {manipulationTypeID}) RETURNING id',
      values: personLog
    }
  },
  selectPersonQuery: function selectPersonQuery(person) {
    return {
      text: 'SELECT id, last_name AS "lastName", first_name AS "firstName", middle_name AS "middleName", dob, gender_id AS "genderID" FROM fl.e_persons WHERE is_deleted = \'N\' AND id = {id}',
      values: person
    }
  },
  insertPersonQuery: function insertPersonQuery(person) {
    return {
    text: 'INSERT INTO fl.e_persons (id, last_name, first_name, middle_name, dob, gender_id) VALUES ({id}, {lastName}, {firstName}, {middleName}, {dob}, {genderID}) RETURNING id',
    values: person
    }
  },
  insertPersonQueryLog: function insertPersonQueryLog(personLog) {
    return {
    text: 'INSERT INTO log.e_persons (session_id, manipulation_type_id, iin, last_name, first_name, middle_name, dob, gender_id) values ({sessionID}, {manipulationTypeID}, {iin}, {lastName}, {firstName}, {middleName}, {dob}, {genderID}) RETURNING id',
    values: personLog
    }
  },
  updatePersonQuery: function updatePersonQuery(person) {
    return {
      text: 'UPDATE e_persons SET id = {id}, last_name = {lastName}, first_name = {firstName}, middle_name = {middleName}, dob = {dob}, gender_id = {genderID} WHERE id = {id} RETURNING id',
      values: person
    }
  },
  deletePersonQuery: function deletePersonQuery(person) {
    return {
      text: 'UPDATE e_persons SET is_deleted = 1 WHERE id = {id} RETURNING id',
      values: person
    }
  },
  selectCompaniesQuery: function selectCompaniesQuery() {
    return {
      text: 'SELECT id, short_name AS "shortName", long_name AS "longName", full_name AS "fullName" FROM ul.e_companies WHERE is_deleted = \'N\' ORDER BY id ASC'
    }
  },
  selectCompaniesQueryLog: function selectCompaniesQueryLog(companyLog) {
    return {
      text: 'INSERT INTO log$.e_persons (session_id, manipulation_type_id) VALUES ({sessionID}, {manipulationTypeID}) RETURNING id'
    }
  },
  insertCompanyQuery: function insertCompanyQuery(company) {
    return {
      text: 'INSERT INTO ul.e_companies (id, short_name, long_name, full_name) VALUES ({id}, {shortName}, {longName}, {fullName}) RETURNING id',
      values: company
    }
  },
  selectUserQuery: function selectUserQuery(user) {
    return {
      text: 'SELECT u_password FROM meta.e_users WHERE is_blocked = \'N\' AND is_deleted = \'N\' AND u_username = {username}',
      values: user
    }
  },
  selectUsersQuery: function selectUsersQuery() {
    return {
      text: 'SELECT id, person_id AS "personID", u_username AS "username", u_password AS "password", default_role_id AS "defaultRoleID", is_blocked AS "isBlocked", is_deleted AS "isDeleted" FROM meta.e_users ORDER BY id ASC'
    }
  },
  selectUserRolesByUserID: function selectUserRolesByUserID(user) {
    return {
      text: 'SELECT id, role_id AS "roleID", user_id AS "userID" FROM meta.r_e_roles_e_users WHERE is_deleted = \'N\' AND user_id = {userID}',
      values: user
    }
  },
  selectRolesQuery: function selectRolesQuery() {
    return {
      text: 'SELECT id, role_name AS "roleName", is_deleted AS "isDeleted" FROM meta.e_roles ORDER BY id ASC;'
    }
  },
  selectUserRoles: function selectUsersRoles(user) {
    return {
      text: 'SELECT u.role_id AS "roleID", r.role_name AS "roleName" FROM meta.r_e_roles_e_users u, meta.e_roles r WHERE u.role_id = r.id AND u.user_id = {userID} ORDER BY u.id ASC',
      values: user
    }
  },
  selectUsersRolesQuery: function selectUsersRolesQuery() {
    return {
      text: 'SELECT id, role_id AS "roleID", user_id AS "userID" FROM meta.r_e_roles_e_users ORDER BY id ASC'
    }
  },
  insertSessionQuery: function insertSessionQuery(user) {
    return {
      text: 'INSERT INTO meta.e_sessions (user_id, role_id) VALUES ({userID}, {roleID}) RETURNING id',
      values: user
    }
  },
  'Select users': function () {
    return {
      text: 'SELECT id, person_id AS "personID", u_username AS "username", u_password AS "password", default_role_id AS "defaultRoleID", is_blocked AS "isBlocked", is_deleted AS "isDeleted" FROM meta.e_users ORDER BY id ASC;'
    }
  }
};

module.exports = DBQueries;
