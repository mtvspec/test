'use strict';

var pg = require('pg');

var PGService = {
  selectRecords: function selectRecords(query, cb) {
    if (!(query && typeof query === 'object')) {
      throw new Error('query not found');
      return cb(500, 'error');
    }
    if (!(query.text && typeof query.text === 'string')) {
      throw new Error('query text not found');
      return cb(500, 'error');
    }
    pg.connect(function (err, client, done) {
      if (err) {
        throw new Error(err);
        return cb(500, 'error');
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            throw new Error(err);
            return cb(500, 'error');
          } else {
            rowCount = result.rowCount;
            if (rowCount === 0) {
              return cb(204, []);
            } else if (rowCount > 0) {
              if (query.values) {
                return cb(200, result.rows[0]);
              } else {
                return cb(200, result.rows);
              }
            }
          }
        });
      }
    });
  },
  updateRecord: function updateRecord(query, cb) {
    console.log(query);
    if (!(query && typeof query === 'object')) {
      throw new Error('query not found');
      return cb(500, 'error');
    }
    if (!(query.text && typeof query.text === 'string')) {
      throw new Error('query text not found');
      return cb(500, 'error');
    }
    pg.connect(function (err, client, done) {
      if (err) {
        throw new Error(err);
        return cb(500, 'error');
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount, status;
          if (err) {
            if (err.code === '23505') {
              return cb(400, err.detail);
            }
            console.log(err);
            throw new Error(err);
            return cb(500, 'error');
          } else {
            rowCount = result.rowCount;
            if (rowCount === 0) {
              return cb(204, []);
            } else if (rowCount === 1) {
              if (query.text.startsWith('INSERT')) {
                return cb(201, result.rows[0]);
              } else {
                return cb(200, result.rows[0]);
              }
            }
          }
        });
      }
    });
  }
};

module.exports = PGService;
