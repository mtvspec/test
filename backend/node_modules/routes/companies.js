'use strict';

var CompaniesRouter = require('express').Router();

var DBQueries = require('../db/DBQueries.js');
var DBService = require('../db/DBService.js'), PGService = new DBService();

/* @RequestController */
CompaniesRouter
/**
 * @
 * {object} query text
 * @return
 * {number} status
 * {array} companies
*/
/* @RequestService */
.get('/', function (request, response) {
  var res;
  PGService.performQueryWithoutLogging(DBQueries.selectCompaniesQuery(), PGService.selectRecords, function (status, data) {
    res = response.status(status);
    if (status === 200) {
      res.json(data);
    }
    return res.end();
  });
})
/**
 * {object} query text
 * @params
 * {string} bin company's bin
 * @return
 * {number} status
 * {object} company
*/
/* @RequestService */
.get('/:bin', function (request, response) {
  if (!request.params.bin) {
    return response.status(400).end();
  }
  var res,
  company = {
    bin: request.params.bin
  };
  if (PGController.validate(company, 'bin')) {
    PGService.performQueryWithoutLogging(DBQueries.selectCompanyQuery(company), PGService.selectRecord, function (status, data) {
      res = response(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
})
/**
 * {object} query text
 * @request
 * @body
 * {object} company company data
 * @response
 * {number} status
 * {object} bin company's bin
*/
/* @RequestService */
.post('/', function (request, response) {
  var res,
  company = {
    bin: request.body.bin,
    companyName: request.body.companyName
  };
  if (PGController.validate(company, 'companyData')) {
    PGService.performQueryWithoutLogging(DBQueries.insertCompanyQuery(company), PGService.insertRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
})
/**
 * {object} query text
 * @request
 * @param
 * {string} bin company's bin
 * @body
 * {object} company company data
 * @response
 * {number} status
 * {string} bin company's bin
*/
/* @RequestService */
.put('/:bin', function (request, response) {
  if (!request.params.bin) {
    return response.status(400).end();
  }
  var res,
  company = {
    bin: request.params.bin,
    companyName: request.body.companyName
  };
  if (PGController.validate(company, 'company')) {
    PGService.performQueryWithoutLogging(DBQueries.updateCompanyQuery(company), PGService.updateRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
})
/**
 * {object} query text
 * @request
 * @param
 * {string} bin company's bin
 * @response
 * {number} status
 * {string} bin company's bin
*/
/* @RequestService */
.delete('/:bin', function (request, response) {
  if (!request.params.bin) {
    return response.status(400).end();
  }
  var res,
  company = {
    bin: request.params.bin,
    companyName: request.body.companyName
  };
  if (PGController.validate(company, 'bin')) {
    PGService.performQueryWithoutLogging(DBQueries.deleteCompanyQuery(company), PGService.deleteRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
});

module.exports = CompaniesRouter;

/*

Get all companies:
1) query text
2) input data
3) output data
*/

.post('/', function (request, response) {
  var person = {
    iin: String(request.body.iin),
    lastName: String(request.body.lastName),
    firstName: String(request.body.firstName),
    middleName: String(request.body.middleName),
    dob: new Date(request.body.dob),
    genderID: String(request.body.genderID)
  },
  config = {
    query: DBUtils.insertPersonQuery(person),
    log: DBUtils.insertPersonQueryLog(person)
  };

  if (!DBController.validate(person, 'personData')) {
    DBUtils.performQuery(config,
      function (status, data) {
      return response.status(status)
        .json(data).end();
    });
  } else {
    return response.status(400).end();
  }
  
});

function performQuery(config, cb) {
  if (!config.query) {
    return cb(400, null);
  } else {
    config.query = DBUtils.formatQuery(config.query);
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('performQuery: connect:\n', err);
        return cb(500, null);
      } else {
        client.query({
          query: config.query.text,
          values: config.query.values
        }, function (err, result) {
          var rowCount, data;
          if (err) {
            console.error('performQuery: query:\n', err);
            return cb(500, null);
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              return cb(204, []);
            } else {
              data = result.rows;
              if (config.log) {
                config.log = formatQuery(config.log);
                client.query({
                  query: config.log.text,
                  values: config.log.values
                }, function (err, result) {
                  var rowCount;
                  if (err) {
                    console.error('performQuery: log:\n', err);
                  } else {
                    done();
                    rowCount = result.rowCount;
                    if (rowCount === 1) {
                      console.log('Logged');
                    } else {
                      console.log('Not logged');
                    }
                  }
                });
              } else {
                return cb(200, data);
              }
            }
          }
        });
      }
    });
  }
};