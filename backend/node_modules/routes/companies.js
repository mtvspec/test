'use strict';

var CompaniesRouter = require('express').Router(),
DBQueries = require('../db/DBQueries.js'),
Controller = require('../controller'), PGController = new Controller(),
LTService = require('pg-service'), CompaniesService = new LTService(),
CompaniesQueries = require('../db/queries/companies.js'),
companies = [];

if (companies.length === 0) {
  CompaniesService.getRecords({
    text: CompaniesQueries['select companies']
  }).then(
    function (resolve) {
      for (var i = 0; i < resolve.data.length; i++) {
        companies.push(resolve.data[i]);
      }
      return companies;
    }, function (reject) {
      console.error(reject.status, reject.message);
    }
  );
} else {
  return companies;
}

/* @RequestController */
CompaniesRouter
/* @RequestService */
.head('/', function (request, response) {
  CompaniesService.getRecord({
    text: CompaniesQueries['select companies count']
  }).then(
    function (resolve) {
      console.log(resolve.data);
      return response.status(resolve.status)
      .json(resolve.data).end();
    },
    function (reject) {
      return response.status(reject.status)
      .json(reject.message).end();
    }
  );
})
.get('/', function (request, response) {
  CompaniesService.getRecords({
    text: CompaniesQueries['select companies']
  }).then(
    function (resolve) {
      return response.status(resolve.status)
      .json(resolve.data).end();
    },
    function (reject) {
      return response.status(reject.status)
      .json(reject.message).end();
    }
  );
})
/* @RequestService */
.get('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  var company = {id: String(request.params.id)};
  if (PGController.validate(company, 'bin')) {
    CompaniesService.getRecord({
      text: CompaniesQueries['select company'],
      values: [company.id]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Company selected:\n', resolve.data);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      },
      function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.post('/', function (request, response) {
  var company = {
    /* required */
    id: String(request.body.id),
    /* required length: 1 - 500 */
    shortName: String(request.body.shortName),
    longName: String(request.body.longName),
    fullName: String(request.body.fullName)
  };
  console.log('Company:\n', company);
  if (PGController.validate(company, 'company')) {
    CompaniesService.insertRecord({
      text: CompaniesQueries['insert company'],
      values: [
        company.id,
        company.shortName,
        company.longName,
        company.fullName
      ]
    }).then(
      function (resolve) {
        if (response.status === 201) {
          console.log('Company inserted:\n', company);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      }, function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.put('/:id', function (request, response) {
  if (!request.params.id) {
    return response.status(400).end();
  }
  var company = {
    /* required */
    id: String(request.params.id),
    /* required length: 1 - 500 */
    shortName: String(request.body.shortName),
    longName: String(request.body.longName),
    fullName: String(request.body.fullName)
  };
  console.log('Company:\n', company);
  if (PGController.validate(company, 'company')) {
    CompaniesService.updateRecord({
      text: CompaniesQueries['update company'],
      values: [
        company.id,
        company.shortName,
        company.longName,
        company.fullName
      ]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Company updated:\n', company);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      }, function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.delete('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  var company = {id: String(request.params.id)};
  if (PGController.validate(company, 'bin')) {
    CompaniesService.getRecord({
      text: CompaniesQueries['delete company'],
      values: [company.id]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Company deleted:\n', resolve.data);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      },
      function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
.options('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  var company = {id: String(request.params.id)};
  if (PGController.validate(company, 'bin')) {
    CompaniesService.deleteRecord({
      text: CompaniesQueries['restore company'],
      values: [company.id]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Company restored:\n', resolve.data);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      },
      function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
});

module.exports = CompaniesRouter;
