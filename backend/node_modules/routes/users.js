'use strict';

var UsersRouter = require('express').Router(),
bcrypt = require('bcrypt-nodejs'),
DBQueries = require('../db/DBQueries.js'),
Controller = require('../controller'), PGController = new Controller(),
DBService = require('../db/DBService.js'), PGService = new DBService(),
UsersModel = [], OnlineUsers = [];

/* /api/users */
UsersRouter
.get('/', function (request, response) {
  var users = [], roles = [], persons = [];
  UsersService.getRoles(function (status, data) {
    roles = data;
  });
  UsersService.getUsers(function (status, data) {
    users = data;
  });
  UsersService.getPersons(function (status, data) {
    persons = data;
  });
  return response.status(200).json(roles).end();
})
.post('/login', function (request, response) {
  if (!(request.body.username && request.body.password)) {
    return response.status(400).end();
  }
  var user = {
    /* required 6 - 20 a-z */
    username: String(request.body.username),
    /* required 6 - 20 */
    password: String(request.body.password)
  };
  if (PGController.validate(user, 'user')) {
    UsersService.authentificateUser(user, function (status, data) {
      return response.status(status).json(data).end();
    });
  } else {
    return response.status(400).end();
  }
})
.post('/signup', function (request, response) {
  if (!(request.body.username && request.body.password)) {
    return response.status(400).end();
  }
  var user = {
    /* required length: 6 - 20 a-z */
    username: String(request.body.username),
    /* required length: 6 - 20 */
    password: String(request.body.password)
  };
  if (PGController.validator({
    type: 'user',
    data: {
      'username': user.username,
      'password': user.password
    }
  })) {
    UsersService.createUser(user, function (status, data) {
      if (status === 201) {
        UsersService.openSession(user, function (status, data) {
          if (status === 201) {
            return response.status(status).json(data).end();
          } else {
            return response.status(status).end();
          }
        });
      } else {
        return response.status(status).end();
      }
    });
  } else {
    return response.status(400).end();
  }
})
.post('/logout', function (request, response) {
  // body...
})

var UsersService = {
  getUsers: function getUsers(cb) {
    var User = {};
    if (UsersModel.length === 0) {
      PGService.performQueryWL(
        DBQueries.selectUsersQuery(),
        PGService.selectRecordsWL,
        function (status, users) {
          if (status === 200) {
            for (var i = 0; i < users.length; i++) {
              UsersService.authoriseUser({userID: users[i].id}, function (status, data) {
                if (status === 200) {
                  for (var i = 0; i < UsersModel.length; i++) {
                    if (UsersModel[i].userID === users[i].id) {
                      for (var i = 0; i < data.length; i++) {
                        UsersModel[i].roles.push({
                          roleID: data[i].roleID,
                          roleName: data[i].roleName
                        });
                        console.log(UsersModel);
                      }
                    }
                  }
                }
              });
              UsersService.getPerson({id: users[i].personID}, function (status, data) {
                if (status === 200) {
                  User.person = {
                    personID: data.id,
                    lastName: data.lastName,
                    firstName: data.firstName,
                    middleName: data.middleName,
                    dob: data.dob,
                    genderID: data.genderID
                  };
                }
              });
              UsersModel.push({
                userID: users[i].id,
                credentials: {
                  username: users[i].username,
                  password: users[i].password
                },
                status: 'offline',
                roles: [],
                person: {
                  personID: users[i].personID
                },
                defaultRoleID: users[i].defaultRoleID,
                isBlocked: users[i].isBlocked,
                isDeleted: users[i].isDeleted
              });
            }
            return cb(UsersModel);
          } else {
            return cb(UsersModel);
          }
        }
      )
    } else {
      return cb(UsersModel);
    }
  },
  authentificateUser: function authentificateUser(user, cb) {
    var pass = bcrypt.hashSync(user.password);
    console.log(pass);
    for (var i = 0; i < UsersModel.length; i++) {
      if (UsersModel[i].credentials.username === user.username) {
        if (bcrypt.compareSync(user.password, UsersModel[i].credentials.password)) {
          return cb(200, UsersModel[i]);
        }
      }
      console.error('Authentification failed');
      return cb(400, 'Authentification failed');
    }
  },
  authoriseUser: function authoriseUser(user, cb) {
    PGService.performQueryWL(
      DBQueries.selectUserRoles({userID: user.userID}),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  openSession: function openSession(user, cb) {
    console.log(user);
    PGService.performQueryWL(
      DBQueries.insertSessionQuery({userID: user.userID, roleID: user.roleID}),
      PGService.insertRecordWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  closeSession: function closeSession(sessionID, cb) {
    PGService.performQueryWL(
      DBQueries.updateSessionQuery(sessionID),
      PGService.updateRecordWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  createUser: function createUser(user) {
    PGService.performQueryWL(
      DBQueries.insertUserQuery(user),
      PGService.insertRecordWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  getRoles: function (cb) {
    PGService.performQueryWL(
      DBQueries.selectUsersRolesQuery(),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  getPerson: function getPerson(person, cb) {
    PGService.performQueryWL(
      DBQueries.selectPersonQuery(person),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  getPersons: function getPersons(cb) {
    PGService.performQueryWL(
      DBQueries.selectPersonsQuery(),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  }
};

UsersService.getUsers(function (UsersModel) {
  // console.log(UsersModel);
});

module.exports = UsersRouter;
