'use strict';

var UsersRouter = require('express').Router(),
bcrypt = require('bcrypt-nodejs'),
DBQueries = require('../db/DBQueries.js'),
Controller = require('../controller'), PGController = new Controller(),
DBService = require('../db/DBService.js'), PGService = new DBService(),
UsersModel = [], OnlineUsers = [],
_usersPromise, _usersRolesPromise, _userRolePromise;

getUsers();

if (_usersPromise) {
  getUsers().then(
    function (success) {
      for (var i = 0; i < success.data.length; i++) {
        UsersModel.push({
          userID: success.data[i].id,
          credentials: {
            username: success.data[i].username,
            password: success.data[i].password
          },
          status: 'offline',
          roles: [],
          person: {
            id: success.data[i].personID
          },
          defaultRoleID: success.data[i].defaultRoleID,
          isBlocked: success.data[i].isBlocked,
          isDeleted: success.data[i].isDeleted
        });
      }
    },
    function (failure) {
      console.log('getUsers:\n', failure);
    }
  );
}

/* /api/users */
UsersRouter
.get('/', function (request, response) {
  var users = [], roles = [], persons = [];
  UsersService.getRoles(function (status, data) {
    roles = data;
  });
  UsersService.getUsers(function (status, data) {
    users = data;
  });
  UsersService.getPersons(function (status, data) {
    persons = data;
  });
  return response.status(200).json(roles).end();
})
.post('/login', function (request, response) {
  if (request.cookies.token) {
    return response.status(400)
    .json('Authentificated').end();
  } else {
    RequestService.authentificateUser({
      username: request.body.user.username,
      password: request.body.user.password
    }).then(
      function (success) {
        return response.status(success.status)
        .json(success.user).end();
      },
      function (failure) {
        return response.status(failure.status)
        .json(failure.message).end();
      }
    );
  }
})
.get('/authorise/:id', function (request, response) {
  if (request.cookies.token) {
    return response.status(400)
    .json('Authentificated').end();
  } else {
    RequestService.authoriseUser({
      userID: request.params.id
    }).then(
      function (success) {
        console.log(success);
        return response.status(success.status)
        .json(success.roles).end();
      },
      function (failure) {
        console.log(failure);
        return response.status(failure.status)
        .json(failure.message).end();
      }
    )
  }
})
.post('/signup', function (request, response) {
  if (!(request.body.username && request.body.password)) {
    return response.status(400).end();
  }
  var user = {
    /* required length: 6 - 20 a-z */
    username: String(request.body.username),
    /* required length: 6 - 20 */
    password: String(request.body.password)
  };
  if (PGController.validator({
    type: 'user',
    data: {
      'username': user.username,
      'password': user.password
    }
  })) {
    UsersService.createUser(user, function (status, data) {
      if (status === 201) {
        UsersService.openSession(user, function (status, data) {
          if (status === 201) {
            return response.status(status).json(data).end();
          } else {
            return response.status(status).end();
          }
        });
      } else {
        return response.status(status).end();
      }
    });
  } else {
    return response.status(400).end();
  }
})
.post('/logout', function (request, response) {
  // body...
})

var UsersService = {
  getUsers: function getUsers(cb) {
    var User = {};
    if (UsersModel.length === 0) {
      PGService.performQueryWL(
        DBQueries.selectUsersQuery(),
        PGService.selectRecordsWL,
        function (status, users) {
          if (status === 200) {
            for (var i = 0; i < users.length; i++) {
              UsersModel.push({
                userID: users[i].id,
                credentials: {
                  username: users[i].username,
                  password: users[i].password
                },
                status: 'offline',
                roles: [],
                person: {
                  personID: users[i].personID
                },
                defaultRoleID: users[i].defaultRoleID,
                isBlocked: users[i].isBlocked,
                isDeleted: users[i].isDeleted
              });
              UsersService.authoriseUser({userID: users[i].id}, function (status, data) {
                if (status === 200) {
                  for (var i = 0; i < UsersModel.length; i++) {
                    if (UsersModel[i].userID === users[i].id) {
                      UsersModel[i].roles.push(data);
                    }
                  }
                }
              });
              UsersService.getPerson({id: users[i].personID}, function (status, data) {
                if (status === 200) {
                  User.person = {
                    personID: data.id,
                    lastName: data.lastName,
                    firstName: data.firstName,
                    middleName: data.middleName,
                    dob: data.dob,
                    genderID: data.genderID
                  };
                }
              });
            }
            return cb(UsersModel);
          } else {
            return cb(UsersModel);
          }
        }
      )
    } else {
      return cb(UsersModel);
    }
  },
  authoriseUser: function authoriseUser(user, cb) {
    PGService.performQueryWL(
      DBQueries.selectUserRoles({userID: user.userID}),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  openSession: function openSession(user, cb) {
    console.log(user);
    PGService.performQueryWL(
      DBQueries.insertSessionQuery({userID: user.userID, roleID: user.roleID}),
      PGService.insertRecordWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  closeSession: function closeSession(sessionID, cb) {
    PGService.performQueryWL(
      DBQueries.updateSessionQuery(sessionID),
      PGService.updateRecordWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  createUser: function createUser(user) {
    PGService.performQueryWL(
      DBQueries.insertUserQuery(user),
      PGService.insertRecordWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  getRoles: function (cb) {
    PGService.performQueryWL(
      DBQueries.selectUsersRolesQuery(),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  getPerson: function getPerson(person, cb) {
    PGService.performQueryWL(
      DBQueries.selectPersonQuery(person),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  getPersons: function getPersons(cb) {
    PGService.performQueryWL(
      DBQueries.selectPersonsQuery(),
      PGService.selectRecordsWL,
      function (status, data) {
        return cb(status, data);
      }
    )
  },
  checkUsername: function checkUsername(username) {
    for (var i = 0; i < UsersModel.length; i++) {
      if (UsersModel[i].credentials.username === username) {
        return true;
      } else {
        return false;
      }
    }
  },
  checkPassword: function checkPassword(password) {
    for (var i = 0; i < UsersModel.length; i++) {
      if (UsersModel[i].credentials.password === password) {
        return true;
      } else {
        return false;
      }
    }
  }
};



function getUsers() {
  if (_usersPromise) {
    return _usersPromise;
  } else {
    return _usersPromise = PGService.selectRecordsP(DBQueries.selectUsersQuery());
  }
};

var RequestService = {
  getRoles: function getRoles() {
    if (_usersRolesPromise) {
      return _usersRolesPromise;
    } else {
      return _usersRolesPromise = PGService.selectRecordsP(DBQueries.selectUsersRolesQuery());
    }
  }
}

function getRoleByID(user) {
  if (_userRolePromise) {
    return _userRolePromise;
  } else {
    return _userRolePromise = PGService.performQueryWLP(
     DBQueries.selectUserRolesByUserID(user),
     PGService.selectRecordsByIDP().then(
       function (success) {
         console.log(success);
       },
       function (failure) {
         console.log(failure);
       }
     )
   )
  }
}

RequestService.getRoles().then(
  function (success) {
    for (var i = 0; i < UsersModel.length; i++) {
      RequestService.getRoleByID({userID: UsersModel[i].userID}).then(
        function (success) {
          console.log(success);
          UsersModel[i].roles.push(success.data);
        },
        function (failure) {
          console.log('getRoleByID:\n', failure);
        }
      )
    }
  },
  function (failure) {
    console.log('getRoles:\n', failure);
  }
)

RequestService.authoriseUser = function authoriseUser(user) {
  return new Promise(function (success, failure) {
    if (!user.userID) {
      failure({
        status: 400,
        message: 'User id not found'
      });
    } else {
      RequestService.getUserRoles(user, function (status, data) {
        success({
          status: status,
          roles: data
        });
      });
    }
  });
};

RequestService.getUserRoles = function getUserRoles(user, cb) {
  PGService.performQueryWL(
    DBQueries.selectUserRolesByUserID(user),
    PGService.selectRecordsByIDWL,
    function (status, data) {
      return cb(status, data);
    }
  )
}

RequestService.authentificateUser = function authentificateUser(user) {
  return new Promise(function (success, failure) {
    if (!UsersService.checkUsername(user.username)) {
      failure({
        status: 400,
        message: 'Username not found'
      });
    } else {
      for (var i = 0, len = UsersModel.length; i < len; i++) {
        if (UsersModel[i].credentials.username === user.username) {
          if (bcrypt.compareSync(user.password, UsersModel[i].credentials.password)) {
            success({
              status: 200,
              user: UsersModel[i]
            });
          }
          break;
        } else {
          success({
            status: 204,
            message: 'User not found'
          });
        }
      }
    }
  });
}

// UsersService.getUsers(function (UsersModel) {
// });

module.exports = UsersRouter;


// function $pg(config) {
//   return new Promise(function (success, failure) {
//     PGService.performQueryWL(
//       queryText: DBQueries[config.queryText],
//       queryData: config.data,
//       queryFn: PGService[config.queryFn]
//     )
//   })
// };

// $pg({
//   queryText: 'Select users',
//   queryData: users,
//   queryFn: 'Select records'
// }).then(
//   function (success) {
//     // body...
//   },
//   function (failure) {
//     // body...
//   }
// );

var DBQueries = {
  'Select users': {
    text: ''
  }
}

var PGService = {
  'Select records': function () {
    return new Promise(function (success, failure) {
      pg.connect(function (err, client, done) {
        if (err) {
          console.error('selectRecordsP: connect:\n', query, '\nerror:\n', err);
          failure({
            status: 500,
            message: err.message
          });
        } else {
          client.query({
            text: query.text
          }, function (err, result) {
            var rowCount;
            if (err) {
              console.error('selectRecordsP: connect:\n', query, '\nerror:\n', err);
              failure({
                status: 500,
                message: err.message
              });
            } else {
              done();
              rowCount = result.rowCount;
              if (rowCount > 0) {
                success({
                  status: 200,
                  data: result.rows
                });
              } else if (rowCount === 0) {
                success({
                  status: 204,
                  data: []
                });
              }
            }
          });
        }
      });
    });
  }
}
