'use strict';

var UsersRouter = require('express').Router(),
bcrypt = require('bcrypt-nodejs'),
pg = require('pg'),
DBQueries = require('../db/DBQueries.js'),
Controller = require('../controller'), PGController = new Controller(),
DBService = require('../db/DBService.js'), PGService = new DBService(),
UsersModel = require('users'), OnlineUsers = [],
_usersPromise, _usersRolesPromise, _userRolePromise;

getUsers();

if (_usersPromise) {
  getUsers().then(
    function (success) {
      for (var i = 0; i < success.data.length; i++) {
        UsersModel.push({
          userID: success.data[i].id,
          credentials: {
            username: success.data[i].username,
            password: success.data[i].password
          },
          status: 'offline',
          roles: [],
          person: {
            id: success.data[i].personID
          },
          defaultRoleID: success.data[i].defaultRoleID,
          isBlocked: success.data[i].isBlocked,
          isDeleted: success.data[i].isDeleted
        });
      }
      console.log(UsersModel);
    },
    function (failure) {
      console.log('getUsers:', failure.message);
    }
  ).then(function (success) {
    getUsersPersons(UsersModel).then(
      function (success) {
        console.log(success);
    }, function (failure) {
        console.log(failure);
    });
  });
};
//
// function getUsersPersons(UsersModel) {
//   return new Promise(function(resolve, reject) {
//     for (var i = 0; i < UsersModel.length; i++) {
//       RequestService.getUserPerson(UsersModel[i].person.id).then(
//         function (success) {
//         UsersModel[i].person = {
//           personID: success.person.id,
//           lastName: success.person.lastName,
//           firstName: success.person.firstName,
//           middleName: success.person.middleName,
//           dob: success.person.dob,
//           genderID: success.person.genderID
//         };
//       }, function (failure) {
//         failure(failure);
//         console.error('getUserPerson:', failure.error);
//       });
//     }
//     resolve(UsersModel);
//   });
//
//   console.log(UsersModel);
//   return UsersModel;
// };
//
// /* /api/users */
UsersRouter
// .get('/', function (request, response) {
//   var users = [], roles = [], persons = [];
//   UsersService.getRoles(function (status, data) {
//     roles = data;
//   });
//   UsersService.getUsers(function (status, data) {
//     users = data;
//   });
//   UsersService.getPersons(function (status, data) {
//     persons = data;
//   });
//   return response.status(200).json(roles).end();
// })
.post('/authentificate', function (request, response) {
  RequestService.authentificateUser({
    username: request.body.user.username,
    password: request.body.user.password
  }).then(
    function (success) {
      return response.status(success.status)
      .json(success.user).end();
    },
    function (failure) {
      return response.status(failure.status)
      .json(failure.message).end();
    }
  );
})
// .get('/authorise/:id', function (request, response) {
//   RequestService.authoriseUser(request.params.id).then(
//     function (success) {
//       return response.status(success.status)
//       .json(success.roles).end();
//   }, function (failure) {
//     return response.status(failure.status)
//     .json(failure.message).end();
//   });
// })
// .post('/open-session', function (request, response) {
//   RequestService.openSession(request.body.user.userID, request.body.user.roleID).then(
//     function (success) {
//       var token = bcrypt.hashSync(success.sessionID);
//       var session = {
//         userID: request.body.user.userID,
//         roleID: request.body.user.roleID,
//         sessionID: success.sessionID,
//         sessionToken: token
//       };
//       if (UsersService.addOnlineUser(session)) {
//         return response.status(success.status)
//         .cookie('userID', session.userID, 'roleID', session.roleID, 'sessionID', session.sessionID, 'token', session.sessionToken).end();
//       }
//   }, function (failure) {
//     return response.status(failure.status)
//     .json(failure.message).end();
//   });
// })
// .post('/signup', function (request, response) {
//   if (!(request.body.username && request.body.password)) {
//     return response.status(400).end();
//   }
//   var user = {
//     /* required length: 6 - 20 a-z */
//     username: String(request.body.username),
//     /* required length: 6 - 20 */
//     password: String(request.body.password)
//   };
//   if (PGController.validator({
//     type: 'user',
//     data: {
//       'username': user.username,
//       'password': user.password
//     }
//   })) {
//     UsersService.createUser(user, function (status, data) {
//       if (status === 201) {
//         UsersService.openSession(user, function (status, data) {
//           if (status === 201) {
//             return response.status(status).json(data).end();
//           } else {
//             return response.status(status).end();
//           }
//         });
//       } else {
//         return response.status(status).end();
//       }
//     });
//   } else {
//     return response.status(400).end();
//   }
// })
// .post('/logout', function (request, response) {
//   // body...
// })
//
var UsersService = {
  checkUsername: function checkUsername(username) {
    for (var i = 0; i < UsersModel.length; i++) {
      if (UsersModel[i].credentials.username === username) {
        return true;
      } else {
        return false;
      }
    }
  },
  addOnlineUser: function addOnlineUser(session) {
    for (var i = 0; i < UsersModel.length; i++) {
      if (UsersModel[i].userID === session.userID) {
        UsersModel[i].status = 'online'
        UsersModel[i].session = {
          sessionID: session.sessionID,
          token: session.sessionToken
        }
        if (UsersModel[i].status && UsersModel[i].status === 'online' &&
        UsersModel[i].session &&
        typeof UsersModel[i].session.sessionID === 'number' &&
        typeof UsersModel[i].session.token === 'string') {
          return true;
        }
      } else {
        throw new Error('User not found');
        return false;
      }
    }
  }
};

function getUsers() {
  if (_usersPromise) {
    return _usersPromise;
  } else {
    return _usersPromise = PGService.selectRecordsP(DBQueries.selectUsersQuery());
  }
};

var RequestService = {
  authentificateUser: function authentificateUser(user) {
    return new Promise(function (success, failure) {
      if (!UsersService.checkUsername(user.username)) {
        failure({
          status: 400,
          message: 'Username not found'
        });
      } else {
        for (var i = 0, len = UsersModel.length; i < len; i++) {
          if (UsersModel[i].credentials.username === user.username) {
            if (bcrypt.compareSync(user.password, UsersModel[i].credentials.password)) {
              UsersModel[i].status = 'online'
              success({
                status: 200,
                user: UsersModel[i]
              });
            }
            break;
          } else {
            success({
              status: 204,
              message: 'User not found'
            });
          }
        }
      }
    });
  },
  getUserPerson: function getUserPerson(personID) {
    return new Promise(function(resolve, reject) {
      pg.connect(function (err, client, done) {
        if (err) {
          reject({
            status: 500,
            error: err.message
          });
        } else {
          client.query({
            text: 'SELECT id, last_name AS "lastName", first_name AS "firstName", middle_name AS "middleName", dob, gender_id AS "genderID" FROM person.e_persons WHERE is_deleted = \'N\' AND id = $1;',
            values: [personID]
          }, function (err, result) {
            var rowCount;
            if (err) {
              reject({
                status: 500,
                error: err.message
              });
            } else {
              done();
              rowCount = result.rowCount;
              if (rowCount === 0) {
                resolve({
                  status: 204,
                  roles: []
                });
              } else if (rowCount === 1) {
                resolve({
                  status: 200,
                  person: result.rows[0]
                });
              }
            }
          });
        }
      });
    });
  },
  authoriseUser: function authoriseUser(userID) {
    return new Promise(function(resolve, reject) {
      pg.connect(function (err, client, done) {
        if (err) {
          reject({
            status: 500,
            error: err.message
          });
        } else {
          client.query({
            text: 'SELECT u.role_id AS "roleID", r.role_name AS "roleName" FROM meta.r_e_user_e_roles u, meta.e_roles r WHERE u.role_id = r.id AND user_id = $1;',
            values: [userID]
          }, function (err, result) {
            var rowCount;
            if (err) {
              reject({
                status: 500,
                error: err.message
              });
            } else {
              done();
              rowCount = result.rowCount;
              if (rowCount === 0) {
                resolve({
                  status: 204,
                  roles: []
                });
              } else if (rowCount > 0) {
                resolve({
                  status: 200,
                  roles: result.rows
                });
              }
            }
          });
        }
      });
    });
  },
  openSession: function openSession(userID, roleID) {
    return new Promise(function(resolve, reject) {
      pg.connect(function (err, client, done) {
        if (err) {
          reject({
            status: 500,
            error: err.message
          });
        } else {
          client.query({
            text: 'INSERT INTO meta.e_sessions (user_id, role_id) VALUES ($1, $2) RETURNING id;',
            values: [
              userID,
              roleID
            ]
          }, function (err, result) {
            var rowCount;
            if (err) {
              reject({
                status: 500,
                error: err.message
              });
            } else {
              done();
              rowCount = result.rowCount;
              if (rowCount === 0) {
                resolve({
                  status: 204,
                  roles: []
                });
              } else if (rowCount === 1) {
                resolve({
                  status: 201,
                  sessionID: result.rows[0].id
                });
              }
            }
          });
        }
      });
    });
  }
};

module.exports = UsersRouter;
