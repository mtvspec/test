'use strict';

var personsRouter = require('express').Router(),
DBQueries = require('../db/DBQueries.js'),
Controller = require('../controller'), PGController = new Controller(),
DBService = require('../db/DBService.js'), PGService = new DBService();

/* @RequestController */
personsRouter
/* @RequestService */
.get('/', function (request, response) {
  PGService.performQueryWL(
    DBQueries.selectPersonsQuery(),
    PGService.selectRecordsWL,
    function (status, data) {
      return response.status(status)
      .json(data).end();
  });
})
/* @RequestService */
.get('/:id', function (request, response) {
  if (!request.params.id) {
    return response.status(400).end();
  }
  var person = {
    /* required */
    id: String(request.params.id)
  };
  console.log('PersonID:\n', person);
  if (PGController.validate(person, 'iin')) {
    PGService.performQuery(
      DBQueries.selectPersonQuery(person),
      PGService.selectRecord,
      function (status, data) {
        return response.status(status)
        .json(data).end();
    })
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.post('/', function (request, response) {
  if (!request.body.middleName) {
    request.body.middleName = '';
  }
  var person = {
    /* required */
    id: String(request.body.id),
    /* required  length: 1 - 200 */
    lastName: String(request.body.lastName),
    /* required  length: 1 - 200 */
    firstName: String(request.body.firstName),
    /* length: 1 - 300 */
    middleName: String(request.body.middleName),
    /* required */
    dob: new Date(request.body.dob),
    /* required  length: 1 */
    genderID: String(request.body.genderID)
  },
  personLog = {
    sessionID: 2,
    manipulationTypeID: 'INSERT',
    iin: person.id,
    lastName: person.lastName,
    firstName: person.firstName,
    middleName: person.middleName,
    dob: person.dob,
    genderID: person.genderID
  };
  console.log('Person:\n', person);
  if (PGController.validate(person, 'personData')) {
    PGService.performQuery(
      DBQueries.insertPersonQuery(person),
      DBQueries.insertPersonQueryLog(personLog),
      PGService.insertRecord,
      function (status, data) {
        return response.status(status)
        .json(data).end();
    });
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.put('/:id', function (request, response) {
  if (!request.params.id) {
    return response.status(400).end();
  }
  if (!request.body.middleName) {
    request.body.middleName = '';
  }
  var person = {
    /* required */
    iin: String(request.params.iin),
    /* required  length: 1 - 200 */
    lastName: String(request.body.lastName),
    /* required  length: 1 - 200 */
    firstName: String(request.body.firstName),
    /* length: 1 - 300 */
    middleName: String(request.body.middleName),
    /* required */
    dob: new Date(request.body.dob),
    /* required  length: 1 */
    genderID: String(request.body.genderID)
  },
  personLog = {
    sessionID: 2,
    manipulationTypeID: 'UPDATE',
    iin: person.id,
    lastName: person.lastName,
    firstName: person.firstName,
    middleName: person.middleName,
    dob: person.dob,
    genderID: person.genderID
  };
  console.log('Person:\n', person);
  if (PGController.validate(person, 'personData')) {
    PGService.performQuery(
      DBQueries.updatePersonQuery(person),
      DBQueries.insertPersonQueryLog(personLog),
      PGService.updateRecord,
      function (status, data) {
        return response.status(status)
        .json(data).end();
    });
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.delete('/:id', function (request, response) {
  if (!request.params.id) {
    return response.status(400).end();
  }
  var person = {
    id: String(request.params.id)
  },
  personLog = {
    sessionID: 2,
    manipulationTypeID: 'DELETE',
    iin: person.id
  };
  console.log('PersonID:\n', person);
  if (PGController.validate(person, 'iin')) {
    PGService.performQuery(
      DBQueries.deletePersonQuery(person),
      DBQueries.deletePersonQueryLog(personLog),
      PGService.deleteRecord,
      function (status, data) {
        return response.status(status)
        .json(data).end();
    });
  } else {
    return response.status(400).end();
  }
});

module.exports = personsRouter;
