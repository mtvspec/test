'use strict';

var personsRouter = require('express').Router(),
DBQueries = require('../db/DBQueries.js'),
Controller = require('../controller'), PGController = new Controller(),
DBService = require('../db/DBService.js'), PGService = new DBService(),
PersonsModel = require('persons'),
LTService = require('pg-service'), PersonsService = new LTService(),
PersonsQueries = require('../db/queries/persons.js'),
persons = [];

if (persons.length === 0) {
  PersonsService.selectRecords({
    text: PersonsQueries['select persons']
  }).then(
    function (resolve) {
      for (var i = 0; i < resolve.data.length; i++) {
        persons.push(resolve.data[i]);
      }
      return persons;
    }, function (reject) {
      console.error(reject.status, reject.message);
    }
  );
} else {
  return persons;
}

/* @RequestController */
personsRouter
/* @RequestService */
.head('/', function (request, response) {
  PersonsService.selectRecords({
    text: PersonsQueries['select persons count']
  }).then(
    function (resolve) {
      return response.status(resolve.status)
      .set('Content-Length', resolve.data.count).end();
    },
    function (reject) {
      return response.status(reject.status)
      .json(reject.message).end();
    }
  );
})
/* @RequestService */
.get('/', function (request, response) {
  PersonsService.selectRecords({
    text: PersonsQueries['select persons']
  }).then(
    function (resolve) {
      return response.status(resolve.status)
      .json(resolve.data).end();
    },
    function (reject) {
      return response.status(reject.status)
      .json(reject.message).end();
    }
  );
})
/* @RequestService */
.get('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  var person = {id: String(request.params.id)};
  if (PGController.validate(person, 'iin')) {
    PersonsService.selectRecord({
      text: PersonsQueries['select person'],
      values: [person.id]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Person selected:\n', resolve.data);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      },
      function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.post('/', function (request, response) {
  if (!request.body.middleName) {
    request.body.middleName = '';
  }
  var person = {
    /* required */
    id: String(request.body.id),
    /* required  length: 1 - 200 */
    lastName: String(request.body.lastName),
    /* required  length: 1 - 200 */
    firstName: String(request.body.firstName),
    /* length: 1 - 300 */
    middleName: String(request.body.middleName),
    /* required */
    dob: new Date(request.body.dob),
    /* required  length: 1 */
    genderID: String(request.body.genderID)
  };
  console.log('Person:\n', person);
  if (PGController.validate(person, 'personData')) {
    PersonsService.insertRecord({
      text: PersonsQueries['insert person'],
      values: [
        person.id,
        person.lastName,
        person.firstName,
        person.middleName,
        person.dob,
        person.genderID
      ]
    }).then(
      function (resolve) {
        if (response.status === 201) {
          console.log('Person inserted:\n', person);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      }, function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.put('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  if (!request.body.middleName) {
    request.body.middleName = '';
  }
  var person = {
    /* required */
    id: String(request.params.id),
    /* required  length: 1 - 200 */
    lastName: String(request.body.lastName),
    /* required  length: 1 - 200 */
    firstName: String(request.body.firstName),
    /* length: 1 - 300 */
    middleName: String(request.body.middleName),
    /* required */
    dob: new Date(request.body.dob),
    /* required  length: 1 */
    genderID: String(request.body.genderID)
  }
  if (PGController.validate(person, 'personData')) {
    PersonsService.updateRecord({
      text: PersonsQueries['update person'],
      values: [
        person.id,
        person.lastName,
        person.firstName,
        person.middleName,
        person.dob,
        person.genderID
      ]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Person updated:\n', person);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      }, function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
/* @RequestService */
.delete('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  var person = {id: String(request.params.id)};
  if (PGController.validate(person, 'iin')) {
    PersonsService.deleteRecord({
      text: PersonsQueries['delete person'],
      values: [person.id]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Person deleted:\n', person);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      }, function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
})
.options('/:id', function (request, response) {
  if (!request.params.id) return response.status(400).end();
  var person = {id: String(request.params.id)};
  if (PGController.validate(person, 'iin')) {
    PersonsService.deleteRecord({
      text: PersonsQueries['restore person'],
      values: [person.id]
    }).then(
      function (resolve) {
        if (resolve.status === 200) {
          console.log('Person restored:\n', resolve.data);
        }
        return response.status(resolve.status)
        .json(resolve.data).end();
      },
      function (reject) {
        return response.status(reject.status)
        .json(reject.message).end();
      }
    );
  } else {
    return response.status(400).end();
  }
});

module.exports = personsRouter;
