'use strict';

var personsRouter = require('express').Router();
var DBQueries = require('../db/DBQueries.js');

var Controller = require('../controller');
var PGController = new Controller();

var DBService = require('../db/DBService.js');
var PGService = new DBService();

personsRouter
.get('/', function (request, response) {
  var res;
  PGService.performQuery(DBQueries.selectPersonsQuery(), PGService.selectRecords, function (status, data) {
    res = response.status(status);
    if (status === 200) {
      res.json(data);
    }
    if (status === 204) {
      res.json([{message: 'empty'}]);
    }
    return res.end();
  });
})
.get('/:iin', function (request, response) {
  var res;
  var person = {
    iin: String(request.params.iin)
  };
  console.log('Select person:\n', person);
  if (PGController.validate(person, 'iin')) {
    PGService.performQuery(DBQueries.selectPersonQuery(person), PGService.selectRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end();
    })
  } else {
    return response.status(400).end();
  }
})
.post('/', function (request, response) {
  var res;
  var person = {
    iin: String(request.body.iin),
    lastName: String(request.body.lastName),
    firstName: String(request.body.firstName),
    middleName: String(request.body.middleName),
    dob: String(request.body.dob),
    genderID: String(request.body.genderID)
  };
  var personLog = {
    sessionID: Number(request.body.sessionID),
    manipulationTypeID: 'I',
    iin: person.iin,
    lastName: person.lastName,
    firstName: person.firstName,
    middleName: person.middleName,
    dob: person.dob,
    genderID: person.genderID
  };
  console.log('Create:\n', person);
  PGController.validate(person, 'personData', function (res) {
    console.log('Validate:', res);
    if (res === true) {
      PGService.performQuery(DBQueries.insertPersonQuery(person), DBQueries.insertPersonQueryLog(personLog), PGService.insertRecord, function (status, data) {
        res = response.status(status);
        if (status === 201) {
          res.json(data);
        }
        if (status === 400) {
          res.json(data);
        }
        return res.end();
      });
    } else {
      return response.status(400).end();
    }
  });
})
.put('/:iin', function (request, response) {
  var res;
  var person = {
    iin: String(request.params.iin),
    lastName: String(request.body.lastName),
    firstName: String(request.body.firstName),
    middleName: String(request.body.middleName),
    dob: String(request.body.dob),
    genderID: Number(request.body.genderID)
  };
  console.log('Update:\n', person);
  if (PGController.validate(person, 'personData')) {
    PGService.performQuery(DBQueries.updatePersonQuery(person), PGService.updateRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end;
    });
  } else {
    return response.status(400).end();
  }
})
.delete('/:iin', function (request, response) {
  var res;
  var person = {
    iin: String(request.params.iin)
  };
  console.log('Delete:\n', person);
  if (PGController.validate(person, 'iin')) {
    PGService.performQuery(DBQueries.deletePersonQuery(person), PGService.deleteRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
});

module.exports = personsRouter;