'use strict';

var tasksRouter = require('express').Router();

var DBQueries = require('../db/DBQueries.js')

var Controller = require('../controller');
var PGController = new Controller();

var DBService = require('../db/DBService.js');
var PGService = new DBService();

tasksRouter
.get('/', function (request, response) {
  var res;
  PGService.performQuery(DBQueries.selectTasksQuery(), PGService.selectRecords, function (status, data) {
    res = response.status(status);
    if (status === 200) {
      res.json(data);
    }
    return res.end();
  });
})
.get('/:id', function (request, response) {
  var res;
  var task = {
    /* @type {number} - required */
    id: Number(request.params.id)
  };
  if (PGController.validate(task, 'id')) {
    PGService.performQuery(DBQueries.selectTaskQuery(task), PGService.selectRecord, function (status, data) {
      res = response.status(status);
      if (status === 200) {
        res.json(data);
      }
      if (status === 400) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
})
.post('/', function (request, response) {
  var res;
  var task = {
    /* @type - required  length: 1 - 300 */
    taskName: String(request.body.taskName),
    /* @type length: 1 - 500 */
    taskDescription: String(request.body.taskDescription)
  };
  PGService.performQuery(DBQueries.insertTaskQuery(task), PGService.insertRecord, function (status, data) {
    res = response.status(status);
    if (status === 201) {
      res.json(data);
    }
    if (status === 400) {
      res.json(data);
    }
    return res.end();
  })
})
.put('/:id', function (request, response) {
  var res;
  var task = {
    /* @type {number} - required */
    id: request.params.id,
    /* @type {string} - required */
    taskName: request.body.taskName,
    /* @type {string} */
    taskDescription: request.body.taskDescription
  };
  if (PGController.validateID(task.id)) {
    PGService.performQuery(DBQueries.updateTaskQuery(task), PGService.updateRecord, function (status, data) {
      res = response.status(status);
      if (status === 400) {
        res.json(data);
      }
      return res.end();
    });
  } else {
    return response.status(400).end();
  }
})
.delete('/:id', function (request, response) {
  var task = {
    /* @type {number} */
    id: request.params.id
  };
  if (PGController.validateID(task.id)) {
    PGService.performQuery(DBQueries.deleteTaskQuery(task), PGService.deleteRecord, function (status) {
      return response.status(status).end();
    });
  } else {
    return response.status(400).end();
  }
});

module.exports = tasksRouter;