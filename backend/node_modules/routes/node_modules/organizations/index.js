var RequestController = require('express').Router(),
DivisionsController = require('organizations/divisions'),
RequestValidator = require('request-validator'),
SQLStatements = require('sql-statements'),
PGService = require('pg-service-c'),
OrganizationsModel = require('organizations/OrganizationsModel.js');

RequestController.use('/:id/divisions', DivisionsController);

/* @RequestController */
RequestController
/** @function get organizations count */
.head('/', function (request, response) {
  PGService.selectRecords({
    text: SQLStatements['organizations']['ru']['select organizations count']
  }, function (status, data) {
    return response.status(200)
    .append('Organizations-Count', data[0].count).end();
  });
})
/** @function get organizations */
.get('/', function (request, response) {
  if (OrganizationsModel.length === 0) {
    return response.status(204)
    .json([]).end();
  } else {
    return response.status(200)
    .json(OrganizationsModel).end();
  }
})
/** @function get organization */
.get('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  for (var i = 0, len = OrganizationsModel.length; i < len; i++) {
    if (OrganizationsModel[i].id === bin) {
      return response.status(200)
      .json(OrganizationsModel[i]).end();
    }
  }
  return response.status(204)
  .json([]).end();
})
/** @function create organization */
.post('/', function (request, response) {
  var bin = request.body.id;
  res = RequestValidator.validate(bin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  for (var i = 0; i < OrganizationsModel.length; i++) {
    if (OrganizationsModel[i].id === bin) {
      return response.status(400)
      .json({
        error: 'organization with '+bin+' exist'
      }).end();
    }
  }
  PGService.updateRecord({
    text: SQLStatements['organizations']['ru']['insert organization'],
    values: [
      bin,
      request.body.shortName,
      request.body.longName,
      request.body.fullName
    ]
  }, function (status, data) {
    if ((status === 201 && bin === data.id)) {
      OrganizationsModel.push({
        id: bin,
        shortName: request.body.shortName,
        longName: request.body.longName,
        fullName: request.body.fullName,
        isDeleted: 'N'
      });
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function update organization */
.put('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin')
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['organizations']['ru']['update organization'],
    values: [
      bin,
      request.body.shortName,
      request.body.longName,
      request.body.fullName
    ]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < OrganizationsModel.length; i++) {
        if (OrganizationsModel[i].id === data.id && data.id === bin) {
          OrganizationsModel[i].shortName = request.body.shortName,
          OrganizationsModel[i].longName = request.body.longName,
          OrganizationsModel[i].fullName = request.body.fullName
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function delete organization */
.delete('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin')
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['organizations']['ru']['delete organization'],
    values: [bin]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < OrganizationsModel.length; i++) {
        if (OrganizationsModel[i].id === data.id && data.id === bin) {
          OrganizationsModel[i].isDeleted = 'Y'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function restore organization */
.options('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['organizations']['ru']['restore organization'],
    values: [bin]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < OrganizationsModel.length; i++) {
        if (OrganizationsModel[i].id === data.id && data.id === bin) {
          OrganizationsModel[i].isDeleted = 'N'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
});

module.exports = RequestController;
