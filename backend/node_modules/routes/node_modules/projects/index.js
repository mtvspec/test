'use strict';

var RequestController = require('express').Router(),
RequestValidator = require('request-validator'),
SQLStatements = require('sql-statements'),
PGService = require('pg-service-c'),
ProjectsModel = require('projects/ProjectsModel.js');

/* @RequestController */
RequestController
/** @function get persons count */
.head('/', function (request, response) {
  PGService.selectRecords({
    text: SQLStatements['projects']['ru']['select projects count']
  }, function (status, data) {
    return response.status(200)
    .append('Projects-Count', data[0].count).end();
  });
})
/** @function get projects */
.get('/', function (request, response) {
  if (ProjectsModel.length === 0) {
    return response.status(204)
    .json([]).end();
  } else {
    return response.status(200)
    .json(ProjectsModel).end();
  }
})
/** @function get project */
.get('/:id', function (request, response) {
  var id = request.params.id,
  res = RequestValidator.validate(id, 'id');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  for (var i = 0, len = ProjectsModel.length; i < len; i++) {
    if (ProjectsModel[i].id === id) {
      return response.status(200)
      .json(ProjectsModel[i]).end();
    }
  }
  return response.status(204)
  .json([]).end();
})
/** @function create project */
.post('/', function (request, response) {
  PGService.updateRecord({
    text: SQLStatements['projects']['ru']['insert project'],
    values: [
      request.body.id,
      request.body.customerID,
      request.body.projectFormalName,
      request.body.projectWorkName,
      request.body.projectOfficialName,
      request.body.projectStartDate,
      request.body.projectEndDate,
      request.body.projectBudget,
      request.body.projectManagerID
    ]
  }, function (status, data) {
    if (status === 201 && (request.body.id === data.id)) {
      PersonsModel.push({
        id: request.body.id,
        customerID: request.body.customerID,
        projectFormalName: request.body.projectFormalName,
        projectOfficialName: request.body.projectOfficialName,
        projectStartDate: request.body.projectStartDate,
        projectEndDate: request.body.projectEndDate,
        projectBudget: request.body.projectBudget,
        projectManagerID: request.body.projectManagerID,
        isDeleted: 'N'
      });
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function update project */
.put('/:id', function (request, response) {
  var id = request.params.id,
  res = RequestValidator.validate(id, 'id');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['projects']['ru']['update project'],
    values: [
      id,
      request.body.customerID,
      request.body.projectFormalName,
      request.body.projectWorkName,
      request.body.projectOfficialName,
      request.body.projectStartDate,
      request.body.projectEndDate,
      request.body.projectBudget,
      request.body.projectManagerID
    ]
  }, function (status, data) {
    if (status === 200 && (id === data.id)) {
      for (var i = 0; i < PersonsModel.length; i++) {
        if (ProjectsModel[i].id === data.id) {
          ProjectsModel[i].customerID = request.body.customerID,
          ProjectsModel[i].projectFormalName = request.body.projectFormalName,
          ProjectsModel[i].projectWorkName = request.body.projectWorkName,
          ProjectsModel[i].projectStartDate = request.body.projectStartDate,
          ProjectsModel[i].projectEndDate = request.body.projectEndDate,
          ProjectsModel[i].projectBudget = request.body.projectBudget,
          ProjectsModel[i].projectManagerID = request.body.projectManagerID
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function delete project */
.delete('/:id', function (request, response) {
  var id = request.params.id,
  res = RequestValidator.validate(id, 'id')
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['projects']['ru']['delete project'],
    values: [id]
  }, function (status, data) {
    if (status === 200 && (id === data.id)) {
      for (var i = 0; i < ProjectsModel.length; i++) {
        if (ProjectsModel[i].id === data.id) {
          ProjectsModel[i].isDeleted = 'Y'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function restore project */
.options('/:id', function (request, response) {
  var id = request.params.id,
  res = RequestValidator.validate(id, 'id')
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['projects']['ru']['restore project'],
    values: [id]
  }, function (status, data) {
    if (status === 200 && (id === data.id)) {
      for (var i = 0; i < PersonsModel.length; i++) {
        if (ProjectsModel[i].id === data.id) {
          ProjectsModel[i].isDeleted = 'N'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
});

module.exports = RequestController;
