'use strict';

var UsersModel = [],
SQLStatements = require('sql-statements'),
PGService = require('pg-service-c'),
roles = [],
PersonsModel = require('persons/PersonsModel.js');

var user = Object.create(null);

/** @function select users */
PGService.selectRecords({
  text: SQLStatements['users']['ru']['select users']
}, function (status, data) {
  for (var i = 0; i < data.length; i++) {
    UsersModel.push({
      id: data[i].id,
      credentials: {
        username: data[i].username,
        password: data[i].password
      },
      person: {
        id: data[i].personID
      },
      roles: [],
      status: 'offline',
      condition: {
        isBlocked: data[i].isBlocked,
        isDeleted: data[i].isDeleted
      }
    });
  }
  for (var i = 0; i < UsersModel.length; i++) {
    UsersModel[i].person = getPerson(UsersModel[i].person.id);
  }
  /** @function select roles */
  PGService.selectRecords({
    text: SQLStatements['users']['ru']['select roles']
  }, function (status, data) {
    for (var i = 0; i < data.length; i++) {
      roles.push(data[i]);
    }
    for (var i = 0; i < UsersModel.length; i++) {
      if (UsersModel[i]) {
        getRoles(UsersModel[i].id, function (roles) {
          UsersModel[i].roles = roles;
        });
      }
    }
  });
});


/** @function get user person */
function getPerson(id) {
  for (var i = 0; i < PersonsModel.length; i++) {
    if (PersonsModel[i].id === id) {
      return PersonsModel[i];
    }
  }
};

/** @function get user roles */
function getRoles(id, cb) {
  var _roles = []
  for (var i = 0; i < roles.length; i++) {
    if (roles[i].userID === id) {
      _roles.push({
        id: roles[i].roleID,
        roleName: roles[i].roleName
      });
    }
  }
  return cb(_roles);
};

module.exports = UsersModel;
