'use strict';

var UsersQueries = require('db/queries/users.js'),
PersonsQueries = require('db/queries/persons.js'),
LTService = require('pg-service'), UsersService = new LTService(),
LTService = require('pg-service'), PersonsService = new LTService();

/**
* @function fetch all users
* @return users
* @function fetch all users persons
* @param users
* @return users
* @function fetch all users roles
* @param users
* @return users
*/

function UsersModel() {
  return {
    fetchUsers: function fetchUsers() {
      return UsersService.selectRecords({
        text: UsersQueries['select users']
      }).then(
        function (resolve) {
          for (var i = 0; i < resolve.data.length; i++) {
            UsersModel.push({
              id: resolve.data[i].id,
              credentials: {
                username: resolve.data[i].username,
                password: resolve.data[i].password
              },
              status: 'offline',
              roles: [],
              person: {
                id: resolve.data[i].personID
              },
              defaultRoleID: resolve.data[i].defaultRoleID,
              isBlocked: resolve.data[i].isBlocked,
              isDeleted: resolve.data[i].isDeleted
            });
          }
          return UsersModel;
        }, function (reject) {
          console.error('getUsers:', reject.message);
        }
      );
    },
    getUsers: function getUsers() {
      if (_usersPromise) {
        return _usersPromise;
      } else {
        _usersPromise = UsersService.selectRecords({
          text: UsersQueries['select users']
        }).then(
          function (resolve) {
            for (var i = 0; i < resolve.data.length; i++) {
              UsersModel.push({
                id: resolve.data[i].id,
                credentials: {
                  username: resolve.data[i].username,
                  password: resolve.data[i].password
                },
                status: 'offline',
                roles: [],
                person: {
                  id: resolve.data[i].personID
                },
                defaultRoleID: resolve.data[i].defaultRoleID,
                isBlocked: resolve.data[i].isBlocked,
                isDeleted: resolve.data[i].isDeleted
              });
            }
            return UsersModel;
          }, function (reject) {
            console.error('getUsers:', reject.message);
          }
        );
        return _usersPromise;
      }
    }
  }
};

if (UsersModel.length === 0) {
  getUsers(function (UsersModel) {
    return UsersModel;
  });
}

function getUsers(cb) {
  UsersService.selectRecords({
    text: UsersQueries['select users']
  }).then(
    function (resolve) {
      for (var i = 0; i < resolve.data.length; i++) {
        UsersModel.push({
          id: resolve.data[i].id,
          credentials: {
            username: resolve.data[i].username,
            password: resolve.data[i].password
          },
          status: 'offline',
          roles: [],
          person: {
            id: resolve.data[i].personID
          },
          defaultRoleID: resolve.data[i].defaultRoleID,
          isBlocked: resolve.data[i].isBlocked,
          isDeleted: resolve.data[i].isDeleted
        });
      }
      cb(UsersModel);
    }, function (reject) {
      cb(reject.message);
      console.error('getUsers:', reject.message);
    }
  );
};

function getUser(id, cb) {
  for (var i = 0; i < UsersModel.length; i++) {
    if (UsersModel.length > 0 && UsersModel[i].id === id) {
      return cb({
        status: 200,
        user: UsersModel[i]
      });
    } else if (UsersModel.length > 0) {
      return cb({
        status: 204,
        user: []
      });
    }
  }
}

module.exports = UsersModel;
module.exports = getUser;
