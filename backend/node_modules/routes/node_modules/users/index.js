'use strict';

var RequestController = require('express').Router(),
RequestValidator = require('request-validator'),
uuid = require('uuid'),
bcrypt = require('bcrypt-nodejs'),
SQLStatements = require('sql-statements'),
PGService = require('pg-service-c'),
UsersModel = require('users/UsersModel.js');

RequestController
/** @function get users count */
.head('/', function (request, response) {
  PGService.selectRecords({
    text: SQLStatements['companies']['ru']['select companies count']
  }, function (status, data) {
    return response.status(200)
    .append('Companies-Count', data[0].count).end();
  });
})
/** @function get users */
.get('/', function (request, response) {
  if (UsersModel.length === 0) {
    return response.status(204)
    .json([]).end();
  } else {
    return response.status(200)
    .json(UsersModel).end();
  }
})
/** @function get person */
.get('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  for (var i = 0, len = CompaniesModel.length; i < len; i++) {
    if (CompaniesModel[i].id === bin) {
      return response.status(200)
      .json(CompaniesModel[i]).end();
    }
  }
  return response.status(204)
  .json([]).end();
})
/** @function authentificate user */
.post('/authentificate', function (request, response) {
  var user = {
    username: request.body.user.username,
    password: request.body.user.password
  };
  if (!checkUsername(user.username)) {
    return response.status(204)
    .json({
      error: 'User not found'
    }).end();
  } else {
    for (var i = 0, len = UsersModel.length; i < len; i++) {
      if (UsersModel[i].credentials.username === user.username) {
        if (bcrypt.compareSync(user.password, UsersModel[i].credentials.password)) {
          UsersModel[i].status = 'online'
          return response.status(200)
          .json(UsersModel[i]).end();
        }
      } else {
        return response.status(204)
        .json({
          error: 'User not found'
        }).end();
      }
    }
  }
})
.post('/open-session', function (request, response) {
  var userID = request.body.user.userID,
  roleID = request.body.user.roleID,
  timestamp = new Date(),
  token, session;
  PGService.updateRecord({
    text: SQLStatements['sessions']['ru']['insert session'],
    values: [
      userID,
      roleID
    ]
  }, function (status, data) {
    if (status === 201) {
      session = uuid;
      return response.status(status)
      .json(session).end();
    } else {
      return response.status(status)
      .json(data).end();
    }
  })
})
/** @function create user */
.post('/', function (request, response) {
  var bin = request.body.id;
  res = RequestValidator.validate(bin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  for (var i = 0; i < CompaniesModel.length; i++) {
    if (CompaniesModel[i].id === bin) {
      return response.status(400)
      .json({
        error: 'company with '+bin+' exist'
      }).end();
    }
  }
  PGService.updateRecord({
    text: SQLStatements['companies']['ru']['insert company'],
    values: [
      bin,
      request.body.shortName,
      request.body.longName,
      request.body.fullName
    ]
  }, function (status, data) {
    if ((status === 201 && bin === data.id)) {
      CompaniesModel.push({
        id: bin,
        shortName: request.body.shortName,
        longName: request.body.longName,
        fullName: request.body.fullName,
        isDeleted: 'N'
      });
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function update person */
.put('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin')
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['companies']['ru']['update company'],
    values: [
      bin,
      request.body.shortName,
      request.body.longName,
      request.body.fullName
    ]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < CompaniesModel.length; i++) {
        if (CompaniesModel[i].id === data.id) {
          CompaniesModel[i].shortName = request.body.shortName,
          CompaniesModel[i].longName = request.body.longName,
          CompaniesModel[i].fullName = request.body.fullName
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function delete person */
.delete('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin')
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['companies']['ru']['delete company'],
    values: [request.params.id]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < CompaniesModel.length; i++) {
        if (CompaniesModel[i].id === data.id) {
          CompaniesModel[i].isDeleted = 'Y'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function restore person */
.options('/:id', function (request, response) {
  var bin = request.params.id,
  res = RequestValidator.validate(bin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['companies']['ru']['restore company'],
    values: [request.params.id]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < CompaniesModel.length; i++) {
        if (CompaniesModel[i].id === data.id) {
          CompaniesModel[i].isDeleted = 'N'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
});

function checkUsername(username) {
  for (var i = 0; i < UsersModel.length; i++) {
    if (UsersModel[i].credentials.username === username) {
      return true;
    } else {
      return false;
    }
  }
};

module.exports = RequestController;
