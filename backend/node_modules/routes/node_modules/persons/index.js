'use strict';

var pg = require('pg');

function PersonsModel() {
  var Persons = [];
  return function PersonsService() {
    return {
      getPersonGenders: function getPersonGenders() {
        return new Promise(function(resolve, reject) {
          pg.connect(function (err, client, done) {
            if (err) {
              reject({
                status: 500,
                message: err.message
              });
            } else {
              client.query({
                text: 'SELECT id, gender_name AS "genderName" FROM persons.d_person_gender ORDER BY id DESC;'
              }, function (err, result) {
                var rowCount;
                if (err) {
                  reject({
                    status: 500,
                    message: err.message
                  });
                } else {
                  done();
                  rowCount = result.rowCount;
                  if (rowCount === 0) {
                    resolve({
                      status: 204,
                      genders: []
                    });
                  } else if (rowCount > 0) {
                    resolve({
                      status: 200,
                      genders: result.rows
                    });
                  }
                }
              });
            }
          });
        });
      },
      getPersons: function getPersons() {
        return new Promise(function(resolve, reject) {
          pg.connect(function (err, client, done) {
            if (err) {
              reject({
                status: 500,
                message: err.message
              });
            } else {
              client.query({
                text: 'SELECT id, last_name AS "lastName", first_name AS "firstName", middle_name AS "middleName", dob, gender_id AS "genderID", is_deleted AS "isDeleted" FROM persons.e_persons ORDER BY id ASC;'
              }, function (err, result) {
                var rowCount;
                if (err) {
                  reject({
                    status: 500,
                    message: err.message
                  });
                } else {
                  done();
                  rowCount = result.rowCount;
                  if (rowCount === 0) {
                    resolve({
                      status: 204,
                      persons: []
                    });
                  } else if (rowCount > 0) {
                    resolve({
                      status: 200,
                      persons: result.rows
                    });
                  }
                }
              });
            }
          });
        });
      },
      setPersonGender: function setPersonGender(person, genders) {
        for (var i = 0; i < genders.length; i++) {
          if (person.genderID === genders[i].id) {
            person.gender = {
              id: genders[i].id,
              genderName: genders[i].genderName
            };
            delete person.genderID;
            return person;
          }
        }
      },
      getPerson: function getPerson(id) {
        for (var i = 0; i < PersonsModel.length; i++) {
          if (PersonsModel[i].id === id) {
            return cb({
              status: 200,
              person: PersonsModel[i]
            });
          }
        }
      }
    };
  }

  if (PersonsModel.length === 0) {
    PersonsService.getPersons().then(
      function (resolve) {
        if (resolve.status === 200) {
          for (var i = 0; i < resolve.persons.length; i++) {
            PersonsModel.push(resolve.persons[i]);
          };
          return PersonsModel;
        } else if (resolve.status === 204) {
          return PersonsModel;
        }
      }, function (reject) {
        console.error('setPersonGender:\n', reject.status, reject.message);
      }
    );
  }

};

module.exports = PersonsModel;
