'use strict';

var RequestController = require('express').Router(),
RequestValidator = require('request-validator'),
SQLStatements = require('sql-statements'),
PGService = require('pg-service-c'),
PersonsModel = require('persons/PersonsModel.js');

/* @RequestController */
RequestController
/** @function get persons count */
.head('/', function (request, response) {
  PGService.selectRecords({
    text: SQLStatements['persons']['ru']['select persons count']
  }, function (status, data) {
    return response.status(200)
    .append('Persons-Count', data[0].count).end();
  });
})
/** @function get persons */
.get('/', function (request, response) {
  if (PersonsModel.length === 0) {
    return response.status(204)
    .json([]).end();
  } else {
    return response.status(200)
    .json(PersonsModel).end();
  }
})
/** @function get person */
.get('/:id', function (request, response) {
  var iin = request.params.id,
  res = RequestValidator.validate(iin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  for (var i = 0, len = PersonsModel.length; i < len; i++) {
    if (PersonsModel[i].id === iin) {
      return response.status(200)
      .json(PersonsModel[i]).end();
    }
  }
  return response.status(204)
  .json([]).end();
})
/** @function create person */
.post('/', function (request, response) {
  if (!request.body.middleName) {
    request.body.middleName = null;
  }
  PGService.updateRecord({
    text: SQLStatements['persons']['ru']['insert person'],
    values: [
      request.body.id,
      request.body.lastName,
      request.body.firstName,
      request.body.middleName,
      request.body.dob,
      request.body.genderID
    ]
  }, function (status, data) {
    if (status === 201) {
      PersonsModel.push({
        id: request.body.id,
        lastName: request.body.lastName,
        firstName: request.body.firstName,
        middleName: request.body.middleName,
        dob: request.body.dob,
        genderID: request.body.genderID,
        isDeleted: 'N'
      });
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function update person */
.put('/:id', function (request, response) {
  var iin = request.params.id,
  res = RequestValidator.validate(iin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['persons']['ru']['update person'],
    values: [
      iin,
      request.body.lastName,
      request.body.firstName,
      request.body.middleName,
      request.body.dob,
      request.body.genderID
    ]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < PersonsModel.length; i++) {
        if (PersonsModel[i].id === data.id && data.id === iin) {
          PersonsModel[i].lastName = request.body.lastName,
          PersonsModel[i].firstName = request.body.firstName,
          PersonsModel[i].middleName = request.body.middleName,
          PersonsModel[i].dob = request.body.dob,
          PersonsModel[i].genderID = request.body.genderID
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function delete person */
.delete('/:id', function (request, response) {
  var iin = request.params.id,
  res = RequestValidator.validate(iin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['persons']['ru']['delete person'],
    values: [iin]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < PersonsModel.length; i++) {
        if (PersonsModel[i].id === data.id && data.id === iin) {
          PersonsModel[i].isDeleted = 'Y'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
})
/** @function restore person */
.options('/:id', function (request, response) {
  var iin = request.params.id,
  res = RequestValidator.validate(iin, 'iin');
  if (!res.result) {
    return response.status(400)
    .json({
      error: res.message
    }).end();
  }
  PGService.updateRecord({
    text: SQLStatements['persons']['ru']['restore person'],
    values: [iin]
  }, function (status, data) {
    if (status === 200) {
      for (var i = 0; i < PersonsModel.length; i++) {
        if (PersonsModel[i].id === data.id && data.id === iin) {
          PersonsModel[i].isDeleted = 'N'
        }
      }
    }
    return response.status(status)
    .json(data).end();
  });
});

module.exports = RequestController;
