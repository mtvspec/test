'use strict';

function Controller() {
  // body...
}

Controller.prototype.validate = function validate(data, type) {
  if (!data) {
    throw new Error('No data to validate');
  }
  if (!type) {
    throw new Error('No type of data to validate');
  }
  switch (type) {
    case 'person':
    return validators.validatePerson(data);
    default:
      throw new Error('No type to validate data');
      break;
  }
};

var validators = {
  validatePerson: function validatePerson(p) {
    if (!(typeof p === 'object')) {
      return (
        {result: false, message: 'no person'}
      );
    }
    if (!(Object.keys(p).length === 6)) {
      return (
        {result: false, message: 'person must have at 6 properties'}
      )
    }
    var person = {
      id: String(p.id),
      lastName: String(p.lastName),
      firstName: String(p.firstName),
      middleName: String(p.middleName),
      dob: new Date(p.dob),
      genderID: String(p.genderID)
    }
    var
    iin = (iinValid(person.id)),
    lastName = nameValid(person.lastName, 2, 30),
    firstName = nameValid(person.firstName, 2, 20),
    middleName = nameValid(person.middleName, 2, 30),
    dob = dateValid(person.dob),
    genderID = genderIDValid(person.genderID);
    if (!person.middleName) {
      return (
        !(person.id) ? {result: false, message: 'no person id'}
        : !(iin.result) ? {result: iin.result, message: iin.message}
        : !(person.lastName) ? {result: false, message: 'no person last name'}
        : !(lastName.result) ? {result: lastName.result, message: lastName.message}
        : !(person.firstName) ? {result: false, message: 'no person first name'}
        : !(firstName.result) ? {result: firstName.result, message: firstName.message}
        : !(person.dob) ? {result: false, message: 'no person dob'}
        : !(dob.result) ? {result: dob.result, message: dob.message}
        : !(person.genderID) ? {result: false, message: 'no person gender id'}
        : !(genderID.result) ? {result: false, message: genderID.message}
        : {result: true, message: 'person with iin "'+person.id+'" data valid'}
      );
    } else {
      return (
        !(person.id) ? {result: false, message: 'no person id'}
        : !(iin.result) ? {result: iin.result, message: iin.message}
        : !(person.lastName) ? {result: false, message: 'no person last name'}
        : !(lastName.result) ? {result: lastName.result, message: lastName.message}
        : !(person.firstName) ? {result: false, message: 'no person first name'}
        : !(firstName.result) ? {result: firstName.result, message: firstName.message}
        : !(person.middleName) ? {result: false, message: 'no person middle name'}
        : !(middleName.result) ? {result: middleName.result, message: middleName.message}
        : !(person.dob) ? {result: false, message: 'no person dob'}
        : !(dob.result) ? {result: dob.result, message: dob.message}
        : !(person.genderID) ? {result: false, message: 'no person gender id'}
        : !(genderID.result) ? {result: false, message: genderID.message}
        : {result: true, message: 'person with iin "'+person.id+'" data valid'}
      );
    }
  },
  validateID: function validateID(id) {
    return (
      ! (id) ? {result: false, message: 'id not found'}
      : !(typeof id === 'number') ? {result: false, message: 'id "'+id+'" must be a number'}
      : !(id > 0) ? {result: false, message: 'id "'+id+'" must be more than 0'}
      : {result: true, message: '"'+id+'" valid'}
    );
  }
};

function iinValid(iin) {
  if (!iinValid.formatRegExp) {
    iinValid.formatRegExp = new RegExp(/^\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2]\d|3[01])[0-6]\d{5}$/);
  }
  return (
    !(iin) ? {result: false, message: 'no iin'}
    : !(typeof iin === 'string') ? {result: false, message: 'iin "'+iin+'" must be a string'}
    : !(iin.length === 12) ? {result: false, iin: iin, message: 'iin "'+iin+'" must have length equals 12'}
    : !(iinValid.formatRegExp.test(iin)) ? {result: false, message: 'incorrect iin "'+iin+'"'}
    : {result: true, message: '"'+iin+'" valid'}
  );
};

function nameValid(text, minLength, maxLength) {
  if (!nameValid.formatRegExp) {
    nameValid.formatRegExp = new RegExp(/^[а-яА-Я]+$/);
  }
  return (
    !(text) ? {result: false, message: 'no name'}
    : !(typeof text === 'string') ? {result: false, message: 'name "'+text+'" must be a string'}
    : !(minLength) ? {result: false, message: 'no min length'}
    : !(typeof minLength === 'number') ? {result: false, message: 'min length "'+minLength+'" must be a number'}
    : !(text.length >= minLength) ? {result: false, message: 'name must be "'+minLength+'" or more than "'+minLength+'" letters'}
    : !(maxLength) ? {result: false, message: 'no max length'}
    : !(typeof maxLength === 'number') ? {result: false, message: 'max length "'+maxLength+'" must be a number'}
    : !(text.length <= maxLength) ? {result: false, message: 'name '+text+' must be "'+maxLength+'" or less than "'+maxLength+'" letters'}
    : !(nameValid.formatRegExp.test(text)) ? {result: false, message: 'incorrect name "'+text+'"'}
    : {result: true, message: '"'+text+'" valid'}
  );
};

function dateValid(date) {
  return (
    !(date) ? {result: false, message: 'no date'}
    : !(date === 'Invalid Date') ? {result: false, message: 'invalid date'}
    : !(date instanceof Date) ? {result: false, message: 'invalid date "'+date+'"'}
    : {result: true, message: '"'+date+'" valid'}
  );
};

function genderIDValid(genderID) {
  return (
    !(genderID) ? {result: false, message: 'no gender id'}
    : !(typeof genderID === 'string') ? {result: false, message: 'genderID must be a string'}
    : !(genderID.length === 1) ? {result: false, message: 'genderID "'+genderID+'" must have length 1'}
    : !(genderID === 'M' || genderID === 'F') ? {result: false, message: 'genderID "'+genderID+'" must be a \'M\' or \'F\''}
    : {result: true, message: '"'+genderID+'" valid'}
  )
};

module.exports = Controller;
