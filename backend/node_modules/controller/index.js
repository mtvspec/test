'use strict';

function Controller() {
};
/**
* @function validateData
* @params
* {object} data object to validate
* {string} type object type name
* @return
* @ success
* {true} res success validation result
* @ failure
* {false} res failure validation result
*/ 
Controller.prototype.validateData = function validateData(data, type) {
  if (!(data && type)) {
    return false;
  }
  var res;
  switch (type) {
  case 'id':
    if (data) {
      (typeof data.id === 'number' && data.id > 0) ? res = true : res = false;
      return res;
    }
    return false;
    break;
  case 'taskData':
    if (data) {
      (typeof data.taskName === 'string' && data.taskName.length > 0 && data.taskName.length <= 300) ? res = true : res = false;
      if (data.taskDescription) {
        (typeof data.taskDescription === 'string' && data.taskDescription.length > 0 && data.taskDescription.length <= 500) ? res = true : res = false;
      }
      return res;
    }
    return false;
    break;
  case 'task':
    if (data) {
      (typeof data.id === 'number' && data.id > 0) ? res = true: res = false
      (typeof data.taskName === 'number' && data.taskName.length > 0 && data.taskName.length <= 300) ? res = true : res = false;
      if (data.taskDescription) {
        (typeof data.taskDescription === 'string' && data.taskDescription.length > 0 && data.taskDescription.length <= 500) ? res = true : res = false;
      }
      return res;
    }
    return false;
    break;
  default:
    throw new Error('Type not found');
    break;
  }
};

module.exports = Controller;