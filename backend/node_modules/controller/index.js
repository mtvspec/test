'use strict';

var bcrypt = require('bcrypt-nodejs'),
DBQueries = require('../db/DBQueries.js'),
DBService = require('../db/DBService.js'), PGService = new DBService();

function Controller() {
};
/**
* @function validateData
* @param
* {object} data object to validate
* {string} type object type name
* @return
* @name success
* {true} res success validation result
* @name failure
* {false} res failure validation result
*/
Controller.prototype.validate = function validate(data, type) {
  if (!(data && type)) {
    return false;
  }
  switch (type) {
  case 'id':
    if (!idValid(data.id)) {
      return false;
    }
    return true;
    break;
  case 'taskData':
  if (!nameValid(taskName, 1, 300)) {
    return false;
  }
  if (data.taskDescription) {
    if (!nameValid(data.taskDescription, 1, 500)) {
      return false;
    }
  }
  return true;
    break;
  case 'task':
    if (!idValid(data.id)) {
      return false;
    }
    if (!nameValid(taskName, 1, 300)) {
      return false;
    }
    if (data.taskDescription) {
      if (!nameValid(data.taskDescription, 1, 500)) {
        return false;
      }
    }
    return true;
    break;
  case 'iin':
    return iinValid(data.id);
    break;
  case 'personData': // TODO реализовать проверку на наличие букв (только латиница и кирилица)
    if (!(data.id && data.lastName && data.firstName && data.dob && data.genderID)) {
      return false;
    }
    if (!iinValid(data.id)) {
      return false;
    }
    if (!nameValid(data.lastName, 1, 200)) {
      return false;
    }
    if (!nameValid(data.firstName, 1, 200)) {
      return false;
    }
    if (!dateValid(data.dob)) {
      return false;
    }
    if (!genderIDValid(data.genderID)) {
      return false;
    }
    if (data.middleName) {
      return nameValid(data.middleName, 1, 300);
    }
    if (data.middleName === undefined) {
      data.middleName = '';
    }
    return true;
    break;
  case 'bin':
    return binValid(data.id);
    break;
  case 'company':
    if (!(data.id && data.companyName)) {
      return false;
    }
    if (!binValid(data.id)) {
      console.log('bin');
      return false;
    }
    if (!nameValid(data.companyName, 1, 500)) {
      console.log('name');
      return false;
    }
    return true;
    break;
  case 'user':
    if (!(data.username, data.password)) {
      return false;
    }
    if (!nameValid(data.username, 6, 20)) {
      return false;
    }
    passwordValid(data, function (res) {
      if (!res) {
        return false;
      }
    });
    return true;
  case 'projectData':
    if (!data) {
      return false;
    }
    if (!(data.customerID, data.projectFormalName, data.projectWorkName)) {
      return false;
    }
    if (!binValid(data.customerID)) {
      return false;
    }
    if (!nameValid(data.projectFormalName, 1, 2)) {
      return false;
    }
    if (!nameValid(data.projectWorkName, 1, 300)) {
      return false;
    }
    if (data.projectOfficialName) {
      if (!nameValid(data.projectOfficialName, 1, 500)) {
        return false;
      }
    }
    if (data.startDate) {
      if (!dateValid(data.startDate)) {
        return false;
      }
    }
    if (data.endDate) {
      if (!dateValid(data.endDate)) {
        return false;
      }
    }
    if (data.budget) {
      if (!numberValid(data.budget)) {
        return false;
      }
    }
    if (data.managerID) {
      if (!iinValid(data.managerID)) {
        return false;
      }
    }
    return true;
  default:
    throw new Error('Type not found');
    break;
  }
};

function idValid(id) {
  if (typeof id === 'number') {
    if (!id > 0) {
      console.log('Invalid id');
    }
    return id > 0;
  }
};

function numberValid(number) {
  if (typeof number === 'number') {
    if (!number >= 0) {
      console.log('Invalid number');
    }
    return number >= 0;
  }
};

function nameValid(text, minLength, maxLength) {
  if (typeof text === 'string') {
    return text.length > minLength && text.length <= maxLength;
  } else {
    console.log('Invalid name');
    return false;
  }
};

function dateValid(date) {
  if (date instanceof Date) {
    return true;
  } else {
    console.log('Invalid date');
    return false;
  }
};

function genderIDValid(gender) {
  if (typeof gender === 'string') {
    return gender === 'M' || gender === 'F';
  } else {
    console.log('Invalid genderID');
    return false;
  }
};

function iinValid(iin) {
  if (!iinValid.formatRegExp) {
    iinValid.formatRegExp = new RegExp(/^\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2]\d|3[01])[0-6]\d{5}$/);
  }
  if (typeof iin === 'string') {
    var isLengthValid = iin.length === 12;
    var isFormatValid = iinValid.formatRegExp.test(iin);
    return isLengthValid && isFormatValid;
  } else {
    console.log('Invalid iin');
    return false;
  }
};

function binValid(bin) {
  if (!binValid.formatRegExp) {
    binValid.formatRegExp = new RegExp(/^\d{2}(0[1-9]|1[0-2])(0[1-9]|[1-2]\d|3[01])[0-6]\d{5}$/);
  }
  if (typeof bin === 'string') {
    var isLengthValid = bin.length === 12;
    var isFormatValid = binValid.formatRegExp.test(bin);
    return isLengthValid && isFormatValid;
  } else {
    console.log('Invalid bin');
    return false;
  }
};

function passwordValid(user, cb) {
  var isPasswordValid;
  PGService.performQueryWL(
    DBQueries.selectUserQuery({
      username: user.username
    }),
    PGService.selectRecordWL,
    function (status, data) {
      if (status === 200) {
        isPasswordValid = bcrypt.compareSync(user.password, data.u_password);
        return cb(isPasswordValid);
      } else {
        console.log('Invalid password');
        return cb(false);
      }
    });
};

module.exports = Controller;
