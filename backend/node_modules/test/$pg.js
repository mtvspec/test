'use strict';

var pg = require('pg'),
PersonsQueries = require('../db/queries/persons.js'),
queries = [PersonsQueries];

function LTService() {
};

LTService.prototype.getRecords = function getRecords(query, cb) {
  console.log(query);
  if (!query) {
    throw new Error('query not found');
  }
  if (!query.text) {
    throw new Error('query text not found');
  }
  return new Promise(function(resolve, reject) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('selectRecords:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('selectRecords:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount > 0) {
              resolve({
                status: 200,
                data: result.rows
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.getRecord = function getRecord(query) {
  if (!query) {
    throw new Error('query not found');
  }
  if (!query.text) {
    throw new Error('query text not found');
  }
  if (!query.values) {
    throw new Error('query values not found');
  }
  return new Promise(function(resolve, reject) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('selectRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('selectRecord:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 200,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.insertRecord = function insertRecord(query) {
  if (!query) {
    throw new Error('query not found');
  }
  if (!query.text) {
    throw new Error('query text not found');
  }
  if (!query.values) {
    throw new Error('query values not found');
  }
  return new Promise(function(resolve, reject) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('insertRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('insertRecord:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 201,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.updateRecord = function updateRecord(query) {
  if (!query) {
    throw new Error('query not found');
  }
  if (!query.text) {
    throw new Error('query text not found');
  }
  if (!query.values) {
    throw new Error('query values not found');
  }
  return new Promise(function(resolve, reject) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('updateRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('updateRecord:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 200,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.deleteRecord = function deleteRecord(query) {
  if (!query) {
    throw new Error('query not found');
  }
  if (!query.text) {
    throw new Error('query text not found');
  }
  if (!query.values) {
    throw new Error('query values not found');
  }
  return new Promise(function(resolve, reject) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('deleteRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('deleteRecord:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 200,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

module.exports = LTService;
