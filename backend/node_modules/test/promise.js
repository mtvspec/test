'use strict';
var pg = require('pg');

var _personsPromise,
_personPromise,
personID = '871215301496',
person = getPerson(personID);

function selectRecordP(query) {
  return new Promise(function (success, failure) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error(err);
        failure({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error(err);
            failure({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount > 0) {
              success({
                status: 200,
                data: result.rows
              });
            } else if (rowCount === 0) {
              success({
                status: 204,
                data: []
              });
            }
          }
        });
      }
    });
  });
};

function selectRecords(query) {
  return new Promise(function (success, failure) {
    pg.connect(function (err, client, done) {
      if (err) {
        console.error(err);
        failure({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error(err);
            failure({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount > 0) {
              success({
                status: 200,
                data: result.rows
              });
            } else if (rowCount === 0) {
              success({
                status: 204,
                data: []
              });
            }
          }
        });
      }
    });
  });
};

(function getPersons() {
  var selectPersons = {
    text:
      'SELECT '+
        'id, last_name AS "lastName", '+
        'first_name AS "firstName", '+
        'middle_name AS "middleName", '+
        'dob, gender_id AS "genderID", '+
        'is_deleted AS "isDeleted" '+
      'FROM '+
        'fl.e_persons '+
      'ORDER BY '+
        'id ASC;'
  };
  if (_personsPromise) {
    return _personsPromise;
  } else {
    _personsPromise = selectRecords(selectPersons);
  }
})();

function getPerson(personID) {

};

// _personsPromise.then(
//   function (success) {
//     console.log('success 1:', success);
// },
//   function (failure) {
//     console.log('failure 1:', failure);
// });
//
// _personPromise.then(
//   function (person) {
//     console.log('success 2:', person);
// },
//   function (failure) {
//     console.log('failure 2:', failure);
// });

person.then(function (person) {
  // person use
});

var PersonsRouter = require('express').Router(),
messages = require('messages'),
RequestController = require('request-controller'),
RequestService = require('request-service');

PersonsRouter
// /api/persons
.route('/:id')
/**
* @function Get person by personID
* @param Number id personID
* @return Object person Requested person
*/
.get(function (request, response) {
  if (!request.params.id) {
    return response.status(400)
    .json({
      message: messages.personIDNotFound
    }).end();
  } else {
    var person = {
      id: String(request.params.id)
    };
    if (!RequestController.validate(person, 'iin')) {
      return response.status(400)
      .json({
        message: messages.personIDInvalid
      }).end();
    } else {
      RequestService.getPerson(person)
      .then(
        function (status, person) {
          return response.status(status)
          .json(person).end();
      },
        function (status, message) {
          return response.status(status)
          .json(message).end();
      });
    }
  }
});

var RequestService = {
  getPerson: function getPerson(personID) {
    var selectPerson = {
      text:
        'SELECT '+
          'id, last_name AS "lastName", '+
          'first_name AS "firstName", '+
          'middle_name AS "middleName", '+
          'dob, gender_id AS "genderID", '+
          'is_deleted AS "isDeleted" '+
        'FROM '+
          'fl.e_persons '+
        'WHERE '+
          'id = $1;',
      values: [personID]
    };
    if (_personPromise) {
      return _personPromise;
    } else {
      return _personPromise = selectRecord(selectPerson);
    }
  }
}


PGService.performQuery({
  queryText['Select user roles by user id'],
  queryData: data,
  PGService['SELECT']
}).then(
  function (success) {
    roles = success.data;
  },
  function (failure) {
    message = failure.data;
  }
);

/*

1. Текст запроса;
2. Данные;
3. Функция;

*/
