var assert = require('chai').assert, should = require('chai').should(),
expect = require('chai').expect, request = require('superagent');
LTService = require('../pg-service'), PersonsService = new LTService(),
LTServiceC = require('pg-service-c'), PGService = new LTServiceC(),
SQLStatements = require('sql-statements'),
PersonsQueries = require('db/queries/persons.js');

context('Persons management', function () {
  context('Persons administrator', function () {
    context('new person event', function () {
      /**
      * @param        {[string]}  id [person iin] required: true; length: 12;
      * @param        {[string]}  lastName [person last name] required: true; length: 2 - 30;
      * @param        {[string]}  firstName [person first name] required: true; length: 2 - 20;
      * @param        {[string]}  middleName [person middle name] required: true; length: 2 - 30
      * @param        {[date]}    dob [person date of burth] required: true;
      * @param        {[string]}  genderID [person gender id] required: true; length: 1;
      * @return       {[object]}
      * @property     {[string]}  id [person iin] length: 12;
      */
      describe('create person function', function () {
        describe.skip('create person with id === 871215301496', function () {
          it('should return person id === 871215301496', function (done) {
            request('POST', 'http://192.168.1.222/api/persons/')
            .send({
              id: '871215301496',
              lastName: 'Маусумбаев',
              firstName: 'Тимур',
              middleName: 'Владимирович',
              dob: '1987-12-15',
              genderID: 'M'
            })
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(201);
              expect(Object.keys(response.body).length).equals(1);
              expect(response.body.id).equals('871215301496');
              done();
            });
          });
          it('should return person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Маусумбаев');
              expect(response.body.firstName).equals('Тимур');
              expect(response.body.middleName).equals('Владимирович');
              expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        });
        describe.skip('create person with id === 771122350160', function () {
          it('should return person id === 771211350160', function (done) {
            request('POST', 'http://192.168.1.222/api/persons/')
            .send({
              id: '771211350160',
              lastName: 'Абдикаримов',
              firstName: 'Сакен',
              middleName: 'Сагандыкович',
              dob: '1977-11-22',
              genderID: 'M'
            })
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(201);
              expect(Object.keys(response.body).length).equals(1);
              expect(response.body.id).equals('771211350160');
              done();
            });
          });
          it('should return person with id === 771122350160', function () {
            var id = '771211350160';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('771211350160');
              expect(response.body.lastName).equals('Абдикаримов');
              expect(response.body.firstName).equals('Сакен');
              expect(response.body.middleName).equals('Сагандыкович');
              expect(response.body.dob).equals('1977-12-22T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        });
      });
    });
    context('update person event', function () {
      /**
      * @param        {[number]}  id [person iin] required: true; length: 12;
      * @param        {[string]}  lastName [person last name] required: true; length: 2 - 30;
      * @param        {[string]}  firstName [person first name] required: true; length: 2 - 20;
      * @param        {[string]}  middleName [person middle name] required: true; length: 2 - 30
      * @param        {[date]}    dob [person date of burth] required: true;
      * @param        {[string]}  genderID [person gender id] required: true; length: 1;
      * @return       {[object]}
      * @property     {[string]}  id [person iin] length: 12;
      */
      describe('update person function', function () {
        describe.skip('update person with id === 871215301496', function () {
          it('should return person id === 871215301496', function (done) {
            var id = '871215301496';
            request('PUT', 'http://192.168.1.222/api/persons/' + id)
            .send({
              id: '871215301496',
              lastName: 'Иванов',
              firstName: 'Иван',
              middleName: 'Иванович',
              dob: '2000-01-31T00:00:00.000Z',
              genderID: 'F'
            })
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(1);
              expect(response.body.id).equals('871215301496');
              done();
            });
          });
          it('should return person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Иванов');
              expect(response.body.firstName).equals('Иван');
              expect(response.body.middleName).equals('Иванович');
              expect(response.body.dob).equals('2000-01-31T00:00:00.000Z');
              expect(response.body.genderID).equals('F');
              done();
            });
          });
        });
        describe.skip('update person with id === 871215301496', function () {
          it('should return person id === 871215301496', function (done) {
            var id = '871215301496';
            request('PUT', 'http://192.168.1.222/api/persons/' + id)
            .send({
              id: '871215301496',
              lastName: 'Маусумбаев',
              firstName: 'Тимур',
              middleName: 'Владимирович',
              dob: '1987-12-15T00:00:00.000Z',
              genderID: 'M'
            })
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(1);
              expect(response.body.id).equals('871215301496');
              done();
            });
          });
          it('should return person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (err, response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Маусумбаев');
              expect(response.body.firstName).equals('Тимур');
              expect(response.body.middleName).equals('Владимирович');
              expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        })
      });
    });
    context('delete person event', function () {
      /**
      * @param          {[string]}  id [person iin] required: true; length: 12;
      * @return         {[object]}
      * @property       {[string]}  id [person iin] length: 12;
      */
      describe.skip('delete person function', function () {
        describe('delete person with id === 871215301496', function () {
          it('should return person id === 871215301496', function (done) {
            var id = '871215301496';
            request('DELETE', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(1);
              expect(response.body.id).equals('871215301496');
              done();
            });
          });
          it('should return status code 204', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (err, response) {
              assert.ok(response, 'response');
              expect(response.status).equals(204);
              expect(Object.keys(response.body).length).equals(0);
              done();
            });
          });
        });
      });
    });
    context('restore person event', function () {
      /**
      * @param          {[string]}  id [person iin] required: true; length: 12;
      * @return         {[object]}
      * @property       {[string]}  id [person iin] length: 12;
      */
      describe.skip('restore person function', function () {
        describe('restore person with id === 871215301496', function () {
          it('should return person id === 871215301496', function (done) {
            var id = '871215301496';
            request('OPTIONS', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(1);
              expect(response.body.id).equals('871215301496');
              done();
            });
          });
          it('should return person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Маусумбаев');
              expect(response.body.firstName).equals('Тимур');
              expect(response.body.middleName).equals('Владимирович');
              expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        });
      });
    });
    context('get person event', function () {
      /**
      * @param          {[string]}  id [person iin] required: true; length: 12;
      * @return         {[object]}
      * @property       {[string]}  id [person iin] length: 12;
      */
      describe.skip('get person function', function () {
        describe('get person with id === 871215301496', function () {
          it('should return person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Маусумбаев');
              expect(response.body.firstName).equals('Тимур');
              expect(response.body.middleName).equals('Владимирович');
              expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        });
      });
    });
    context('get existing person event', function () {
      /**
      * @type         [url param]
      * @param        {[string]}  id [person iin] required: true; length: 12;
      * @type         [query params]
      * @property     {[string]}  exist: 'true'; [query param: exist]
      * @return       {[object]}
      * @property     {[string]}  id [person iin] length: 12;
      */
      describe.skip('get existing person function', function () {
        describe('get person with id === 871215301496', function () {
          it('should return person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Маусумбаев');
              expect(response.body.firstName).equals('Тимур');
              expect(response.body.middleName).equals('Владимирович');
              expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        });
      });
    });
    context('get not existing person event', function () {
      /**
      * @type         [url param]
      * @param        {[string]} id [person iin] required: true; length: 12;
      * @type         [query params]
      * @property     {[string]} exist: 'false'; [query param: exist]
      * @return       {[object]}
      * @property     {[string]} id [person iin] length: 12;
      */
      describe.skip('get not exist person function', function () {
        describe('get person with id === 871215301496', function () {
          it('should return not exist person with id === 871215301496', function (done) {
            var id = '871215301496';
            request('GET', 'http://192.168.1.222/api/persons/' + id)
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(6);
              expect(response.body.id).equals('871215301496');
              expect(response.body.lastName).equals('Маусумбаев');
              expect(response.body.firstName).equals('Тимур');
              expect(response.body.middleName).equals('Владимирович');
              expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
              expect(response.body.genderID).equals('M');
              done();
            });
          });
        });
      });
    });
    context('get persons event', function () {
      /**
      * @return       {[array]}
      * @property     {[string]}  id [person iin]
      * @property     {[string]}  lastName [person last name]
      * @property     {[string]}  firstName [person first name]
      * @property     {[string]}  middleName [person middle name]
      * @property     {[date]}    dob [person date of birth]
      * @property     {[string]}  isDeleted [person condition id]
      */
      describe.skip('get existing persons function', function () {
        describe('get existing persons', function () {
          it('should return existing persons', function (done) {
            request('GET', 'http://192.168.1.222/api/persons/')
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(2);
              for (var i = 0; i < response.body.length; i++) {
                if (response.body[i].id === '771122350160') {
                  expect(response.body[i].id).equals('771122350160');
                  expect(response.body[i].lastName).equals('Абдикаримов');
                  expect(response.body[i].firstName).equals('Сакен');
                  expect(response.body[i].middleName).equals('Сагандыкович');
                  expect(response.body[i].dob).equals('1977-11-22T00:00:00.000Z');
                  expect(response.body[i].genderID).equals('M');
                }
                if (response.body[i].id === '871215301496') {
                  expect(response.body[i].id).equals('871215301496');
                  expect(response.body[i].lastName).equals('Маусумбаев');
                  expect(response.body[i].firstName).equals('Тимур');
                  expect(response.body[i].middleName).equals('Владимирович');
                  expect(response.body[i].dob).equals('1987-12-15T00:00:00.000Z');
                  expect(response.body[i].genderID).equals('M');
                }
              }
              done();
            });
          });
        });
      });
    });
    context('get existing persons event', function () {
      /**
      * @type           [query params]
      * @property       {[string]}  exist: 'true';
      * @return         {[array]}
      * @property       {[string]}  id [person iin]
      * @property       {[string]}  lastName [person last name]
      * @property       {[string]}  firstName [person first name]
      * @property       {[string]}  middleName [person middle name]
      * @property       {[date]}    dob [person date of birth]
      * @property       {[string]}  isDeleted [person condition id]
      */
      describe.skip('get existing persons function', function () {
        describe('get existing persons', function () {
          it('should return existing persons', function (done) {
            request('GET', 'http://192.168.1.222/api/persons/')
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(2);
              for (var i = 0; i < response.body.length; i++) {
                if (response.body[i].id === '771122350160') {
                  expect(response.body[i].id).equals('771122350160');
                  expect(response.body[i].lastName).equals('Абдикаримов');
                  expect(response.body[i].firstName).equals('Сакен');
                  expect(response.body[i].middleName).equals('Сагандыкович');
                  expect(response.body[i].dob).equals('1977-11-22T00:00:00.000Z');
                  expect(response.body[i].genderID).equals('M');
                }
                if (response.body[i].id === '871215301496') {
                  expect(response.body[i].id).equals('871215301496');
                  expect(response.body[i].lastName).equals('Маусумбаев');
                  expect(response.body[i].firstName).equals('Тимур');
                  expect(response.body[i].middleName).equals('Владимирович');
                  expect(response.body[i].dob).equals('1987-12-15T00:00:00.000Z');
                  expect(response.body[i].genderID).equals('M');
                }
              }
              done();
            });
          });
        });
      });
    });
    context('get not existing persons event', function () {
      /**
      * @type           [query params]
      * @property      {[string]}  exist: 'false';
      * @return        {[array]}
      * @property      {[string]}  id [person iin]
      * @property      {[string]}  lastName [person last name]
      * @property      {[string]}  firstName [person first name]
      * @property      {[string]}  middleName [person middle name]
      * @property      {[date]}    dob [person date of birth]
      * @property      {[string]}  isDeleted [person condition id]
      */
      describe.skip('get not existing persons function', function () {
        describe('get not existing persons', function () {
          it('should return not existing persons', function (done) {
            request('GET', 'http://192.168.1.222/api/persons/')
            .end(function (response) {
              assert.ok(response, 'response');
              expect(response.status).equals(200);
              expect(Object.keys(response.body).length).equals(2);
              for (var i = 0; i < response.body.length; i++) {
                if (response.body[i].id === '771122350160') {
                  expect(response.body[i].id).equals('771122350160');
                  expect(response.body[i].lastName).equals('Абдикаримов');
                  expect(response.body[i].firstName).equals('Сакен');
                  expect(response.body[i].middleName).equals('Сагандыкович');
                  expect(response.body[i].dob).equals('1977-11-22T00:00:00.000Z');
                  expect(response.body[i].genderID).equals('M');
                }
                if (response.body[i].id === '871215301496') {
                  expect(response.body[i].id).equals('871215301496');
                  expect(response.body[i].lastName).equals('Маусумбаев');
                  expect(response.body[i].firstName).equals('Тимур');
                  expect(response.body[i].middleName).equals('Владимирович');
                  expect(response.body[i].dob).equals('1987-12-15T00:00:00.000Z');
                  expect(response.body[i].genderID).equals('M');
                }
              }
              done();
            });
          });
        });
      });
    });
  });
});
