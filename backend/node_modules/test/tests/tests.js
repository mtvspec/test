var assert = require('chai').assert, should = require('chai').should(),
expect = require('chai').expect, request = require('superagent');
LTService = require('pg-service'), PersonsService = new LTService(),
PersonsQueries = require('db/queries/persons.js');

context('Backend', function () {
  context('request-validator', function () {
    // body...
  });
  context('request-interceptor', function () {
    // body...
  });
  context('pg-service', function () {
    // body...
  });
  context('persons-model', function () {
    // body...
  });
  context('persons-model-service', function () {
    // body...
  });
});

context('Administration', function () {
  context('Persons management', function () {
    context('Persons administrator', function () {
      context('new person event', function () {
        /**
        * @param        {[string]}  id [person iin] required: true; length: 12;
        * @param        {[string]}  lastName [person last name] required: true; length: 2 - 30;
        * @param        {[string]}  firstName [person first name] required: true; length: 2 - 20;
        * @param        {[string]}  middleName [person middle name] required: true; length: 2 - 30
        * @param        {[date]}    dob [person date of burth] required: true;
        * @param        {[string]}  genderID [person gender id] required: true; length: 1;
        * @return       {[object]}
        * @property     {[string]}  id [person iin] length: 12;
        */
        describe('create person function', function () {
          describe.skip('create person with id === 871215301496', function () {
            it('should return person id === 871215301496', function (done) {
              request('POST', 'http://192.168.1.222/api/persons/')
              .send({
                id: '871215301496',
                lastName: 'Маусумбаев',
                firstName: 'Тимур',
                middleName: 'Владимирович',
                dob: '1987-12-15',
                genderID: 'M'
              })
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(201);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('871215301496');
                done();
              });
            });
            it('should return person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Маусумбаев');
                expect(response.body.firstName).equals('Тимур');
                expect(response.body.middleName).equals('Владимирович');
                expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          });
          describe.skip('create person with id === 771122350160', function () {
            it('should return person id === 771211350160', function (done) {
              request('POST', 'http://192.168.1.222/api/persons/')
              .send({
                id: '771211350160',
                lastName: 'Абдикаримов',
                firstName: 'Сакен',
                middleName: 'Сагандыкович',
                dob: '1977-11-22',
                genderID: 'M'
              })
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(201);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('771211350160');
                done();
              });
            });
            it('should return person with id === 771122350160', function () {
              var id = '771211350160';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('771211350160');
                expect(response.body.lastName).equals('Абдикаримов');
                expect(response.body.firstName).equals('Сакен');
                expect(response.body.middleName).equals('Сагандыкович');
                expect(response.body.dob).equals('1977-12-22T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          });
        });
      });
      context('update person event', function () {
        /**
        * @param        {[number]}  id [person iin] required: true; length: 12;
        * @param        {[string]}  lastName [person last name] required: true; length: 2 - 30;
        * @param        {[string]}  firstName [person first name] required: true; length: 2 - 20;
        * @param        {[string]}  middleName [person middle name] required: true; length: 2 - 30
        * @param        {[date]}    dob [person date of burth] required: true;
        * @param        {[string]}  genderID [person gender id] required: true; length: 1;
        * @return       {[object]}
        * @property     {[string]}  id [person iin] length: 12;
        */
        describe('update person function', function () {
          describe.skip('update person with id === 871215301496', function () {
            it('should return person id === 871215301496', function (done) {
              var id = '871215301496';
              request('PUT', 'http://192.168.1.222/api/persons/' + id)
              .send({
                id: '871215301496',
                lastName: 'Иванов',
                firstName: 'Иван',
                middleName: 'Иванович',
                dob: '2000-01-31T00:00:00.000Z',
                genderID: 'F'
              })
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('871215301496');
                done();
              });
            });
            it('should return person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Иванов');
                expect(response.body.firstName).equals('Иван');
                expect(response.body.middleName).equals('Иванович');
                expect(response.body.dob).equals('2000-01-31T00:00:00.000Z');
                expect(response.body.genderID).equals('F');
                done();
              });
            });
          });
          describe.skip('update person with id === 871215301496', function () {
            it('should return person id === 871215301496', function (done) {
              var id = '871215301496';
              request('PUT', 'http://192.168.1.222/api/persons/' + id)
              .send({
                id: '871215301496',
                lastName: 'Маусумбаев',
                firstName: 'Тимур',
                middleName: 'Владимирович',
                dob: '1987-12-15T00:00:00.000Z',
                genderID: 'M'
              })
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('871215301496');
                done();
              });
            });
            it('should return person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (err, response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Маусумбаев');
                expect(response.body.firstName).equals('Тимур');
                expect(response.body.middleName).equals('Владимирович');
                expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          })
        });
      });
      context('delete person event', function () {
        /**
        * @param          {[string]}  id [person iin] required: true; length: 12;
        * @return         {[object]}
        * @property       {[string]}  id [person iin] length: 12;
        */
        describe.skip('delete person function', function () {
          describe('delete person with id === 871215301496', function () {
            it('should return person id === 871215301496', function (done) {
              var id = '871215301496';
              request('DELETE', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('871215301496');
                done();
              });
            });
            it('should return status code 204', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (err, response) {
                assert.ok(response, 'response');
                expect(response.status).equals(204);
                expect(Object.keys(response.body).length).equals(0);
                done();
              });
            });
          });
        });
      });
      context('restore person event', function () {
        /**
        * @param          {[string]}  id [person iin] required: true; length: 12;
        * @return         {[object]}
        * @property       {[string]}  id [person iin] length: 12;
        */
        describe.skip('restore person function', function () {
          describe('restore person with id === 871215301496', function () {
            it('should return person id === 871215301496', function (done) {
              var id = '871215301496';
              request('OPTIONS', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('871215301496');
                done();
              });
            });
            it('should return person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Маусумбаев');
                expect(response.body.firstName).equals('Тимур');
                expect(response.body.middleName).equals('Владимирович');
                expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          });
        });
      });
      context('get person event', function () {
        /**
        * @param          {[string]}  id [person iin] required: true; length: 12;
        * @return         {[object]}
        * @property       {[string]}  id [person iin] length: 12;
        */
        describe.skip('get person function', function () {
          describe('get person with id === 871215301496', function () {
            it('should return person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Маусумбаев');
                expect(response.body.firstName).equals('Тимур');
                expect(response.body.middleName).equals('Владимирович');
                expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          });
        });
      });
      context('get existing person event', function () {
        /**
        * @type         [url param]
        * @param        {[string]}  id [person iin] required: true; length: 12;
        * @type         [query params]
        * @property     {[string]}  exist: 'true'; [query param: exist]
        * @return       {[object]}
        * @property     {[string]}  id [person iin] length: 12;
        */
        describe.skip('get existing person function', function () {
          describe('get person with id === 871215301496', function () {
            it('should return person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Маусумбаев');
                expect(response.body.firstName).equals('Тимур');
                expect(response.body.middleName).equals('Владимирович');
                expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          });
        });
      });
      context('get not existing person event', function () {
        /**
        * @type         [url param]
        * @param        {[string]} id [person iin] required: true; length: 12;
        * @type         [query params]
        * @property     {[string]} exist: 'false'; [query param: exist]
        * @return       {[object]}
        * @property     {[string]} id [person iin] length: 12;
        */
        describe.skip('get not exist person function', function () {
          describe('get person with id === 871215301496', function () {
            it('should return not exist person with id === 871215301496', function (done) {
              var id = '871215301496';
              request('GET', 'http://192.168.1.222/api/persons/' + id)
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(6);
                expect(response.body.id).equals('871215301496');
                expect(response.body.lastName).equals('Маусумбаев');
                expect(response.body.firstName).equals('Тимур');
                expect(response.body.middleName).equals('Владимирович');
                expect(response.body.dob).equals('1987-12-15T00:00:00.000Z');
                expect(response.body.genderID).equals('M');
                done();
              });
            });
          });
        });
      });
      context('get persons event', function () {
        /**
        * @return       {[array]}
        * @property     {[string]}  id [person iin]
        * @property     {[string]}  lastName [person last name]
        * @property     {[string]}  firstName [person first name]
        * @property     {[string]}  middleName [person middle name]
        * @property     {[date]}    dob [person date of birth]
        * @property     {[string]}  isDeleted [person condition id]
        */
        describe.skip('get existing persons function', function () {
          describe('get existing persons', function () {
            it('should return existing persons', function (done) {
              request('GET', 'http://192.168.1.222/api/persons/')
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(2);
                for (var i = 0; i < response.body.length; i++) {
                  if (response.body[i].id === '771122350160') {
                    expect(response.body[i].id).equals('771122350160');
                    expect(response.body[i].lastName).equals('Абдикаримов');
                    expect(response.body[i].firstName).equals('Сакен');
                    expect(response.body[i].middleName).equals('Сагандыкович');
                    expect(response.body[i].dob).equals('1977-11-22T00:00:00.000Z');
                    expect(response.body[i].genderID).equals('M');
                  }
                  if (response.body[i].id === '871215301496') {
                    expect(response.body[i].id).equals('871215301496');
                    expect(response.body[i].lastName).equals('Маусумбаев');
                    expect(response.body[i].firstName).equals('Тимур');
                    expect(response.body[i].middleName).equals('Владимирович');
                    expect(response.body[i].dob).equals('1987-12-15T00:00:00.000Z');
                    expect(response.body[i].genderID).equals('M');
                  }
                }
                done();
              });
            });
          });
        });
      });
      context('get existing persons event', function () {
        /**
        * @type           [query params]
        * @property       {[string]}  exist: 'true';
        * @return         {[array]}
        * @property       {[string]}  id [person iin]
        * @property       {[string]}  lastName [person last name]
        * @property       {[string]}  firstName [person first name]
        * @property       {[string]}  middleName [person middle name]
        * @property       {[date]}    dob [person date of birth]
        * @property       {[string]}  isDeleted [person condition id]
        */
        describe.skip('get existing persons function', function () {
          describe('get existing persons', function () {
            it('should return existing persons', function (done) {
              request('GET', 'http://192.168.1.222/api/persons/')
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(2);
                for (var i = 0; i < response.body.length; i++) {
                  if (response.body[i].id === '771122350160') {
                    expect(response.body[i].id).equals('771122350160');
                    expect(response.body[i].lastName).equals('Абдикаримов');
                    expect(response.body[i].firstName).equals('Сакен');
                    expect(response.body[i].middleName).equals('Сагандыкович');
                    expect(response.body[i].dob).equals('1977-11-22T00:00:00.000Z');
                    expect(response.body[i].genderID).equals('M');
                  }
                  if (response.body[i].id === '871215301496') {
                    expect(response.body[i].id).equals('871215301496');
                    expect(response.body[i].lastName).equals('Маусумбаев');
                    expect(response.body[i].firstName).equals('Тимур');
                    expect(response.body[i].middleName).equals('Владимирович');
                    expect(response.body[i].dob).equals('1987-12-15T00:00:00.000Z');
                    expect(response.body[i].genderID).equals('M');
                  }
                }
                done();
              });
            });
          });
        });
      });
      context('get not existing persons event', function () {
        /**
        * @type           [query params]
        * @property      {[string]}  exist: 'false';
        * @return        {[array]}
        * @property      {[string]}  id [person iin]
        * @property      {[string]}  lastName [person last name]
        * @property      {[string]}  firstName [person first name]
        * @property      {[string]}  middleName [person middle name]
        * @property      {[date]}    dob [person date of birth]
        * @property      {[string]}  isDeleted [person condition id]
        */
        describe.skip('get not existing persons function', function () {
          describe('get not existing persons', function () {
            it('should return not existing persons', function (done) {
              request('GET', 'http://192.168.1.222/api/persons/')
              .end(function (response) {
                assert.ok(response, 'response');
                expect(response.status).equals(200);
                expect(Object.keys(response.body).length).equals(2);
                for (var i = 0; i < response.body.length; i++) {
                  if (response.body[i].id === '771122350160') {
                    expect(response.body[i].id).equals('771122350160');
                    expect(response.body[i].lastName).equals('Абдикаримов');
                    expect(response.body[i].firstName).equals('Сакен');
                    expect(response.body[i].middleName).equals('Сагандыкович');
                    expect(response.body[i].dob).equals('1977-11-22T00:00:00.000Z');
                    expect(response.body[i].genderID).equals('M');
                  }
                  if (response.body[i].id === '871215301496') {
                    expect(response.body[i].id).equals('871215301496');
                    expect(response.body[i].lastName).equals('Маусумбаев');
                    expect(response.body[i].firstName).equals('Тимур');
                    expect(response.body[i].middleName).equals('Владимирович');
                    expect(response.body[i].dob).equals('1987-12-15T00:00:00.000Z');
                    expect(response.body[i].genderID).equals('M');
                  }
                }
                done();
              });
            });
          });
        });
      });
    });
  });
  context('Companies management', function () {
    context('Companies administrator', function () {
      context('new company event', function () {
        describe('create company function', function () {
          beforeEach('create company function check create company function availability', function function_name(argument) {
            it('short response with status code 400', function () {
              request('POST', 'http://192.168.1.222/api/companies/')
              .end(function (response) {
                assertl.ok(response, 'response');
                expect(response.status).equals(400);
                expect(Object.keys(response.body).length).equals(0);
                done();
              });
            });
          });
          describe.skip('create company with id === 000101500001', function () {
            it('should return company id === 000101500001', function (done) {
              request('POST', 'http://192.168.1.222/api/companies/')
              .send({
                id: '000101500001',
                shortName: 'Казимпэкс',
                longName: 'АО "РЦ "Казимпэкс"',
                fullName: 'Акционерное общество "Республиканский центр "Казимпэкс"'
              })
              .end(function (err, response) {
                assertl.ok(response, 'response');
                expect(response.status).equals(201);
                expect(Object.keys(response.body).length).equals(1);
                expect(response.body.id).equals('000101500001');
                done();
              });
            });
          });
        });
      });
    });
  });
  context.skip('Users management', function () {
    context('Users administrator', function () {
      context('Users', function () {
        context('Add user event', function () {
          /**
           * This function adds new user in system
           * @param  {string} 'person id' [person id]
           * @param  {array} 'user roles' [user roles]
           * @param  {username} 'username' [username]
           * @param  {password} 'password' [password]
           * @return {number} 'status' [status]
           * @return {object} 'new user' [new user]
           */
          describe('Add user function', function () {
            it('should return user', function (done) {
              done();
            });
          });
        });
        context('Change user password event', function () {
          /**
           * This function updates user password
           * @param  {string} 'token' [session token]
           * @param  {string} 'current password' [current password]
           * @return {number} 'status' [status code 200]
           */
          describe('User password change function', function () {
            it('should update user password', function (done) {
              done();
            });
          });
        });
        context('Lock user event', function () {
          /**
           * This function locks user
           * @param  {number} 'userID' [user id]
           * @return {number} 'status' [status code 200]
           */
          describe('User lock function', function () {
            it('should lock unlocked user', function (done) {
              done();
            });
          });
        });
        context('Unock user event', function () {
          /**
           * This function locks user
           * @param  {number} 'userID' [user id]
           * @return {number} 'status' [status code 200]
           */
          describe('User unlock function', function () {
            it('should unlock locked user', function (done) {
              done();
            });
          });
        });
      });
      context('Roles', function () {
        context('Add user role event', function () {
          /**
           * This function adds user role
           * @param  {number} 'userID' [user id]
           * @return {number} id [user id]
           */
          describe('Add user role function', function () {
            it('should add user role', function (done) {
              done();
            });
          });
        });
      });
    });
  });
  context('Emp management', function () {
    context('new emp event', function () {
      describe('create emp function', function (argument) {
        it('should return emp id');
      });
    });
  });
  context('Projects management', function () {
    context('new project event', function () {
      describe('create project function', function (argument) {
        it('should return project id');
      });
    });
  });
});
