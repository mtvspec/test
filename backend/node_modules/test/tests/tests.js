var assert = require('chai').assert, should = require('chai').should(),
expect = require('chai').expect, request = require('superagent');
LTService = require('pg-service'), PersonsService = new LTService(),
LTServiceC = require('pg-service-c'), PGService = new LTServiceC(),
SQLStatements = require('sql-statements'),
PersonsQueries = require('db/queries/persons.js');

context('Backend', function () {
  context('request-validator', function () {
    // body...
  });
  context('request-interceptor', function () {
    // body...
  });
  context('pg-service-c', function () {
    describe('record fetch function', function () {
      it('should respond with status "200" and return person with id "871215301496"', function (done) {
        PGService.selectRecords({
          text: SQLStatements['persons']['select person'],
          values: ['871215301496']
        }, function (status, data) {
          assert.ok(status, 'status');
          expect(status).equals(200);
          assert.ok(data, 'data');
          expect(Object.keys(data).length).equals(7);
          expect(data.id).equals('871215301496');
          done();
        });
      });
    });
    describe('record update function', function () {
      it('should respond with status "201" and return person id "940909450852"', function (done) {
        PGService.updateRecord({
          text: SQLStatements['persons']['insert person'],
          values: [
            '940909450852',
            'Талапкызы',
            'Куралай',
            null,
            '1994-09-09',
            'F'
          ]
        }, function (status, data) {
          assert.ok(status, 'status');
          expect(status).equals(201);
          assert.ok(data, 'data');
          expect(Object.keys(data).length).equals(1);
          expect(data.id).equals('940909450852');
          done();
        });
      });
      it('should respond with status "200" and return person with id "940909450852"', function (done) {
        PGService.selectRecords({
          text: SQLStatements['persons']['select person'],
          values: ['940909450852']
        }, function (status, data) {
          console.log(data.dob);
          assert.ok(status, 'status');
          expect(status).equals(200);
          assert.ok(data, 'data');
          expect(Object.keys(data).length).equals(7);
          expect(data.id).equals('940909450852');
          expect(data.lastName).equals('Талапкызы');
          expect(data.firstName).equals('Куралай');
          expect(data.middleName).equals(null);
          expect(data.dob).equals('1994-09-09 06:00:00+06');
          expect(data.genderID).equals('F');
          done();
        });
      });
    });
  });
  context('persons-model', function () {
    // body...
  });
  context('persons-model-service', function () {
    // body...
  });
});
context('Administration', function () {


  context.skip('Users management', function () {
    context('Users administrator', function () {
      context('Users', function () {
        context('Add user event', function () {
          /**
           * This function adds new user in system
           * @param  {string} 'person id' [person id]
           * @param  {array} 'user roles' [user roles]
           * @param  {username} 'username' [username]
           * @param  {password} 'password' [password]
           * @return {number} 'status' [status]
           * @return {object} 'new user' [new user]
           */
          describe('Add user function', function () {
            it('should return user', function (done) {
              done();
            });
          });
        });
        context('Change user password event', function () {
          /**
           * This function updates user password
           * @param  {string} 'token' [session token]
           * @param  {string} 'current password' [current password]
           * @return {number} 'status' [status code 200]
           */
          describe('User password change function', function () {
            it('should update user password', function (done) {
              done();
            });
          });
        });
        context('Lock user event', function () {
          /**
           * This function locks user
           * @param  {number} 'userID' [user id]
           * @return {number} 'status' [status code 200]
           */
          describe('User lock function', function () {
            it('should lock unlocked user', function (done) {
              done();
            });
          });
        });
        context('Unock user event', function () {
          /**
           * This function locks user
           * @param  {number} 'userID' [user id]
           * @return {number} 'status' [status code 200]
           */
          describe('User unlock function', function () {
            it('should unlock locked user', function (done) {
              done();
            });
          });
        });
      });
      context('Roles', function () {
        context('Add user role event', function () {
          /**
           * This function adds user role
           * @param  {number} 'userID' [user id]
           * @return {number} id [user id]
           */
          describe('Add user role function', function () {
            it('should add user role', function (done) {
              done();
            });
          });
        });
      });
    });
  });
  context('Emp management', function () {
    context('new emp event', function () {
      describe('create emp function', function (argument) {
        it('should return emp id');
      });
    });
  });
  context('Projects management', function () {
    context('new project event', function () {
      describe('create project function', function (argument) {
        it('should return project id');
      });
    });
  });
});
