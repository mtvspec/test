var assert = require('chai').assert, should = require('chai').should(), expect = require('chai').expect,
chai = require("chai"), chaiAsPromised = require("chai-as-promised"),
request = require('superagent'),
LTService = require('pg-service'), PersonsService = new LTService(),
PersonsQueries = require('db/queries/persons.js');
chai.use(chaiAsPromised);


context('fetch', function () {
  describe('Get persons', function () {
    it('should respond with status code 200 and return persons', function (done) {
      request('GET', 'http://192.168.1.221/api/persons/')
      .end(function(err, response){
        assert.ok(response, 'response');
        response.status.should.equals(200);
        expect(response.body).to.have.length.above(0);
        for (var i = 0; i < response.body.length; i++) {
          assert.ok(response.body[i].id, 'person id');
          response.body[i].id.should.be.a('string');
          response.body[i].should.have.property('id').with.length(12);
          assert.ok(response.body[i].lastName, 'person last name');
          response.body[i].lastName.should.be.a('string');
          assert.ok(response.body[i].firstName, 'person first name');
          response.body[i].firstName.should.be.a('string');
          if (response.body[i].middleName) {
            response.body[i].middleName.should.be.a('string');
          } else if (!response.body[i].middleName) {
            assert.isNull(response.body[i].middleName);
          }
          assert.ok(response.body[i].dob, 'person dob name');
          response.body[i].dob.should.be.a('string');
          assert.ok(response.body[i].genderID, 'person gender id');
          response.body[i].should.have.property('genderID').with.length(1);
        }
        done();
      });
    });
  });
  describe('Get person by id', function () {
    it('should respond with status code 200 and return person', function (done) {
      var id = '871215301496';
      request('GET', 'http://192.168.1.221/api/persons/' + id)
      .end(function(err, response){
        assert.ok(response, 'response');
        response.status.should.equals(200);
        assert(response.body.id === '871215301496', 'invalid person id');
        assert(response.body.lastName === 'Маусумбаев', 'invalid person last name');
        assert(response.body.firstName === 'Тимур', 'invalid person first name');
        assert(response.body.middleName === 'Владимирович', 'invalid person middle name');
        assert(response.body.dob === '1987-12-15T00:00:00.000Z', 'invalid person dob');
        assert(response.body.genderID === 'M', 'invalid person gender id');
        done();
      });
    });
  });
});
context('manipulation', function () {
  describe('Post person', function () {
    it.skip('should respond with status code 201 and return person \'890605300776\'', function (done) {
      request('POST', 'http://192.168.1.221/api/persons/')
      .send({
        id: '890605300776',
        lastName: 'Уразгалиев',
        firstName: 'Роллан',
        middleName: 'Жексембаевич',
        dob: '1989-06-05',
        genderID: 'M'
      })
      .end(function (err, response) {
        assert.ok(response, 'response');
        response.status.should.equals(201);
        assert(response.body.id === '890605300776', 'invalid person id');
        done();
      });
    });
    it.skip('should respond with status code 201 and return person \'871215301496\'', function (done) {
      request('POST', 'http://192.168.1.221/api/persons/')
      .send({
        id: '871215301496',
        lastName: 'Маусумбаев',
        firstName: 'Тимур',
        middleName: 'Владимирович',
        dob: '1987-12-15',
        genderID: 'M'
      })
      .end(function (err, response) {
        assert.ok(response, 'response');
        response.status.should.equals(201);
        assert(response.body.id === '871215301496', 'invalid person id');
        done();
      });
    });
    describe('Update person by id', function () {
      it('should respond with status code 200 and return person \'871215301496\'', function (done) {
        var id = '871215301496';
        request('PUT', 'http://192.168.1.221/api/persons/' + id)
        .send({
          id: '871215301496',
          lastName: 'Маусумбаев',
          firstName: 'Тимур',
          middleName: 'Владимирович',
          dob: '1987-12-15',
          genderID: 'M'
        })
        .end(function (err, response) {
          assert.ok(response, 'response');
          response.status.should.equals(200);
          assert(response.body.id === '871215301496', 'invalid person id');
          done();
        });
      });
    });
    describe('Test db', function () {
      it('should return person', function () {
        var person = {
          id: '871215301496'
        };
        PersonsService.getRecord({
          text: PersonsQueries['select person'],
          values: [person.id]
        }).then(
          function (resolve) {
            console.log(resolve);
            return resolve.should.have.property('data');
          },
          function (reject) {
            return reject.should.have.property('message');
          }
        );
      });
    });
  });
});
