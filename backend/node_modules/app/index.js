'use strict';

var express = require('express'), app = express(), logger = require('morgan'),
cookieParser = require('cookie-parser'), bodyParser = require('body-parser'),
pg = require('pg'), messages = require('messages'),
RequestController = require('./controller.js'),
Controller = require('../controller'), PGController = new Controller(),
RequestInterceptor = require('request-interceptor');
pg.defaults = {
  host: 'localhost',
  port: '5432',
  user: 'mtvspec',
  password: 'mtvspec',
  db: 'mtvspec'
};

// uncomment after placing your favicon in /public
//app.use(favicon(path.join(__dirname, 'public', 'favicon.ico')));
app.use(logger('dev'));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cookieParser());

app.use(function (request, response, next) {
  console.log(request);
  console.log('request:', request.headers['x-real-ip'], request.hostname, request.method, request.url);
  console.log('session-id:', request.get('session-id'));
  console.log('params:', request.params);
  console.log('cookies:', request.cookies);
  console.log('body:\n', request.body);

  // console.log(RequestInterceptor({
  //   url: request.url,
  //   method: request.method,
  //   body: request.body
  // }).result, RequestInterceptor({
  //   url: request.url,
  //   method: request.method,
  //   body: request.body
  // }).message);

  if (!RequestInterceptor({
    url: request.url,
    method: request.method,
    session: request.get('session-id'),
    body: request.body
  }).result) {
    return response.status(400)
    .json({
      error: RequestInterceptor({
        url: request.url,
        method: request.method,
        session: request.get('session-id'),
        body: request.body
      }).message}).end();
  }

  // if (request.url.startsWith('/api/users/authentificate/')) {
  //   RequestController.validateAuthentificateRequest({
  //     method: request.method,
  //     token: request.cookies.token,
  //     user: request.body.user
  //   }, function (error) {
  //     if (error.status === 400) {
  //       return response.status(error.status)
  //       .json(error.message).end();
  //     }
  //     if (error.status === 404) {
  //       return response.status(error.status)
  //       .json(error.message).end();
  //     }
  //   });
  // }

  // if (request.url.startsWith('/api/users/authorise/')) {
  //   if (request.cookies.token) {
  //     return response.status(400)
  //     .json('Authorised').end();
  //   }
  //   if (request.method === 'GET') {
  //     if (!request.params || !request.params.id) {
  //       return response.status(400)
  //       .json('User id not found').end();
  //     } else if (!PGController.validate({
  //       id: Number(request.params.id)
  //     }, 'id')) {
  //       return response.status(400)
  //       .json(messages['User id not correct'][lang]).end();
  //     }
  //   }
  // }
  //
  // if (request.url.startsWith('/api/persons')) {
  //   if (request.method === 'GET') {
  //     if (request.params && request.params.id) {
  //       console.log('true');
  //       if (!PGController.validate({
  //         id: Number(request.params.id)
  //       }, 'iin')) {
  //         return response.status(400)
  //         .json(messages['Person id not correct'][lang]).end();
  //       }
  //     }
  //   }
  // }
  //
  // if (request.url.startsWith('/api/dict/person/genders')) {
  //   console.log('person genders');
  // }

  next();

});

app.use('/api', require('routes'));

/*
// catch 404 and forward to error handler
app.use(function(req, res, next) {
  var err = new Error('Not Found');
  err.status = 404;
  next(err);
});
*/

// error handlers

// development error handler
// will print stacktrace
/*
if (app.get('env') === 'development') {
  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    res.render('error', {
      message: err.message,
      error: err
    });
  });
}
*/

// production error handler
// no stacktraces leaked to user
/*
app.use(function(err, req, res, next) {
  res.status(err.status || 500);
  res.render('error', {
    message: err.message,
    error: {}
  });
});
*/

module.exports = app;
