'use strict';

var pg = require('pg');

function LTService() {
};

LTService.prototype.data = [];

LTService.prototype.selectRecords = function selectRecords(query) {
  return new Promise(function(resolve, reject) {
    if (!(query && typeof query === 'object')) {
      console.log('query not found');
      reject({
        status: 400,
        message: 'query not found'
      });
    }
    if (!(query.text && typeof query.text === 'string')) {
      console.log('query text not found');
      reject({
        status: 400,
        message: 'query text not found'
      });
    }
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('getRecords:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('getRecords:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount > 0) {
              resolve({
                status: 200,
                data: result.rows
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.selectRecord = function getRecord(query) {
  return new Promise(function(resolve, reject) {
    if (!(query && typeof query === 'object')) {
      console.log('query not found');
      reject({
        status: 400,
        message: 'query not found'
      });
    }
    if (!(query.text && typeof query.text === 'string')) {
      console.log('query text not found');
      reject({
        status: 400,
        message: 'query text not found'
      });
    }
    if (!(query.values && typeof query.values === 'array')) {
      console.log('query values not found');
      reject({
        status: 400,
        message: 'query values not found'
      });
    }
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('selectRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('selectRecord:', err.message);
            reject({
              status: 500,
              message: err.detail
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 200,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.insertRecord = function insertRecord(query) {
  return new Promise(function(resolve, reject) {
    if (!(query && typeof query === 'object')) {
      console.log('query not found');
      reject({
        status: 400,
        message: 'query not found'
      });
    }
    if (!(query.text && typeof query.text === 'string')) {
      console.log('query text not found');
      reject({
        status: 400,
        message: 'query text not found'
      });
    }
    if (!(query.values && typeof query.values === 'array')) {
      console.log('query values not found');
      reject({
        status: 400,
        message: 'query values not found'
      });
    }
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('insertRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('insertRecord:', err.message);
            if (err.code === '23505') {
              reject({
                status: 400,
                message: err.detail
              });
            }
            if (err.code === '23502') {
              reject({
                status: 400,
                message: err.column
              });
            }
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 201,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.updateRecord = function updateRecord(query) {
  return new Promise(function(resolve, reject) {
    if (!(query && typeof query === 'object')) {
      console.log('query not found');
      reject({
        status: 400,
        message: 'query not found'
      });
    }
    if (!(query.text && typeof query.text === 'string')) {
      console.log('query text not found');
      reject({
        status: 400,
        message: 'query text not found'
      });
    }
    if (!(query.values && typeof query.values === 'array')) {
      console.log('query values not found');
      reject({
        status: 400,
        message: 'query values not found'
      });
    }
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('updateRecord:', err.message);
        reject({
          status: 500,
          message: err.detail
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('updateRecord:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 200,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

LTService.prototype.deleteRecord = function deleteRecord(query) {
  return new Promise(function(resolve, reject) {
    if (!(query && typeof query === 'object')) {
      console.log('query not found');
      reject({
        status: 400,
        message: 'query not found'
      });
    }
    if (!(query.text && typeof query.text === 'string')) {
      console.log('query text not found');
      reject({
        status: 400,
        message: 'query text not found'
      });
    }
    if (!(query.values && typeof query.values === 'array')) {
      console.log('query values not found');
      reject({
        status: 400,
        message: 'query values not found'
      });
    }
    pg.connect(function (err, client, done) {
      if (err) {
        console.error('deleteRecord:', err.message);
        reject({
          status: 500,
          message: err.message
        });
      } else {
        client.query({
          text: query.text,
          values: query.values
        }, function (err, result) {
          var rowCount;
          if (err) {
            console.error('deleteRecord:', err.message);
            reject({
              status: 500,
              message: err.message
            });
          } else {
            done();
            rowCount = result.rowCount;
            if (rowCount === 0) {
              resolve({
                status: 204,
                data: []
              });
            } else if (rowCount === 1) {
              resolve({
                status: 200,
                data: result.rows[0]
              });
            }
          }
        });
      }
    });
  });
};

module.exports = LTService;
